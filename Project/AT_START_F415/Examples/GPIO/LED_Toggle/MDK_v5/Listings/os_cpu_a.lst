


ARM Macro Assembler    Page 1 


    1 00000000         ;
    2 00000000         ;*******************************************************
                       *************************************************
    3 00000000         ;                                                uC/OS-I
                       II
    4 00000000         ;                                          The Real-Time
                        Kernel
    5 00000000         ;
    6 00000000         ;
    7 00000000         ;                         (c) Copyright 2009-2013; Micri
                       um, Inc.; Weston, FL
    8 00000000         ;                    All rights reserved.  Protected by 
                       international copyright laws.
    9 00000000         ;
   10 00000000         ;                                           ARM Cortex-M
                       4 Port
   11 00000000         ;
   12 00000000         ; File      : OS_CPU_A.ASM
   13 00000000         ; Version   : V3.03.02
   14 00000000         ; By        : JJL
   15 00000000         ;             BAN
   16 00000000         ;
   17 00000000         ; For       : ARMv7 Cortex-M4
   18 00000000         ; Mode      : Thumb-2 ISA
   19 00000000         ; Toolchain : RealView Development Suite
   20 00000000         ;             RealView Microcontroller Development Kit (
                       MDK)
   21 00000000         ;             ARM Developer Suite (ADS)
   22 00000000         ;             Keil uVision
   23 00000000         ;*******************************************************
                       *************************************************
   24 00000000         ;
   25 00000000         
   26 00000000         ;*******************************************************
                       *************************************************
   27 00000000         ;                                          PUBLIC FUNCTI
                       ONS
   28 00000000         ;*******************************************************
                       *************************************************
   29 00000000         
   30 00000000                 IMPORT           OSRunning   ; External referenc
                                                            es
   31 00000000                 IMPORT           OSPrioCur
   32 00000000                 IMPORT           OSPrioHighRdy
   33 00000000                 IMPORT           OSTCBCurPtr
   34 00000000                 IMPORT           OSTCBHighRdyPtr
   35 00000000                 IMPORT           OSIntExit
   36 00000000                 IMPORT           OSTaskSwHook
   37 00000000                 IMPORT           OS_CPU_ExceptStkBase
   38 00000000         
   39 00000000         
   40 00000000                 EXPORT           OSStartHighRdy ; Functions decl
                                                            ared in this file
   41 00000000                 EXPORT           OSCtxSw
   42 00000000                 EXPORT           OSIntCtxSw
   43 00000000                 EXPORT           PendSV_Handler
   44 00000000         
   45 00000000                 IF               {FPU} != "SoftVFP"
   48                          ENDIF



ARM Macro Assembler    Page 2 


   49 00000000         
   50 00000000         
   51 00000000         ;*******************************************************
                       *************************************************
   52 00000000         ;                                               EQUATES
   53 00000000         ;*******************************************************
                       *************************************************
   54 00000000         
   55 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04  ; Interrupt control
                                                             state register.
   56 00000000 E000ED22 
                       NVIC_SYSPRI14
                               EQU              0xE000ED22  ; System priority r
                                                            egister (priority 1
                                                            4).
   57 00000000 000000FF 
                       NVIC_PENDSV_PRI
                               EQU              0xFF        ; PendSV priority v
                                                            alue (lowest).
   58 00000000 10000000 
                       NVIC_PENDSVSET
                               EQU              0x10000000  ; Value to trigger 
                                                            PendSV exception.
   59 00000000         
   60 00000000         
   61 00000000         ;*******************************************************
                       *************************************************
   62 00000000         ;                                     CODE GENERATION DI
                       RECTIVES
   63 00000000         ;*******************************************************
                       *************************************************
   64 00000000         
   65 00000000                 PRESERVE8
   66 00000000                 THUMB
   67 00000000         
   68 00000000                 AREA             CODE, CODE, READONLY
   69 00000000         
   70 00000000         
   71 00000000         ;*******************************************************
                       *************************************************
   72 00000000         ;                                   FLOATING POINT REGIS
                       TERS PUSH
   73 00000000         ;                             void  OS_CPU_FP_Reg_Push (
                       CPU_STK  *stkPtr)
   74 00000000         ;
   75 00000000         ; Note(s) : 1) This function saves S0-S31, and FPSCR reg
                       isters of the Floating Point Unit.
   76 00000000         ;
   77 00000000         ;           2) Pseudo-code is:
   78 00000000         ;              a) Get FPSCR register value;
   79 00000000         ;              b) Push value on process stack;
   80 00000000         ;              c) Push remaining regs S0-S31 on process 
                       stack;
   81 00000000         ;              d) Update OSTCBCurPtr->StkPtr;
   82 00000000         ;*******************************************************
                       *************************************************
   83 00000000         



ARM Macro Assembler    Page 3 


   84 00000000                 IF               {FPU} != "SoftVFP"
   99                          ENDIF
  100 00000000         
  101 00000000         
  102 00000000         ;*******************************************************
                       *************************************************
  103 00000000         ;                                   FLOATING POINT REGIS
                       TERS POP
  104 00000000         ;                             void  OS_CPU_FP_Reg_Pop (C
                       PU_STK  *stkPtr)
  105 00000000         ;
  106 00000000         ; Note(s) : 1) This function restores S0-S31, and FPSCR 
                       registers of the Floating Point Unit.
  107 00000000         ;
  108 00000000         ;           2) Pseudo-code is:
  109 00000000         ;              a) Restore regs S0-S31 of new process sta
                       ck;
  110 00000000         ;              b) Restore FPSCR reg value
  111 00000000         ;              c) Update OSTCBHighRdyPtr->StkPtr pointer
                        of new proces stack;
  112 00000000         ;*******************************************************
                       *************************************************
  113 00000000         
  114 00000000                 IF               {FPU} != "SoftVFP"
  125                          ENDIF
  126 00000000         
  127 00000000         
  128 00000000         ;*******************************************************
                       *************************************************
  129 00000000         ;                                         START MULTITAS
                       KING
  130 00000000         ;                                      void OSStartHighR
                       dy(void)
  131 00000000         ;
  132 00000000         ; Note(s) : 1) This function triggers a PendSV exception
                        (essentially, causes a context switch) to cause
  133 00000000         ;              the first task to start.
  134 00000000         ;
  135 00000000         ;           2) OSStartHighRdy() MUST:
  136 00000000         ;              a) Setup PendSV exception priority to low
                       est;
  137 00000000         ;              b) Set initial PSP to 0, to tell context 
                       switcher this is first run;
  138 00000000         ;              c) Set the main stack to OS_CPU_ExceptStk
                       Base
  139 00000000         ;              d) Trigger PendSV exception;
  140 00000000         ;              e) Enable interrupts (tasks will run with
                        interrupts enabled).
  141 00000000         ;*******************************************************
                       *************************************************
  142 00000000         
  143 00000000         OSStartHighRdy
  144 00000000 481D            LDR              R0, =NVIC_SYSPRI14 ; Set the Pe
                                                            ndSV exception prio
                                                            rity
  145 00000002 F04F 01FF       LDR              R1, =NVIC_PENDSV_PRI
  146 00000006 7001            STRB             R1, [R0]
  147 00000008         
  148 00000008 2000            MOVS             R0, #0      ; Set the PSP to 0 



ARM Macro Assembler    Page 4 


                                                            for initial context
                                                             switch call
  149 0000000A F380 8809       MSR              PSP, R0
  150 0000000E         
  151 0000000E 481B            LDR              R0, =OS_CPU_ExceptStkBase ; Ini
                                                            tialize the MSP to 
                                                            the OS_CPU_ExceptSt
                                                            kBase
  152 00000010 6801            LDR              R1, [R0]
  153 00000012 F381 8808       MSR              MSP, R1
  154 00000016         
  155 00000016 481A            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  156 00000018 F04F 5180       LDR              R1, =NVIC_PENDSVSET
  157 0000001C 6001            STR              R1, [R0]
  158 0000001E         
  159 0000001E B662            CPSIE            I           ; Enable interrupts
                                                             at processor level
                                                            
  160 00000020         
  161 00000020         OSStartHang
  162 00000020 E7FE            B                OSStartHang ; Should never get 
                                                            here
  163 00000022         
  164 00000022         
  165 00000022         ;*******************************************************
                       *************************************************
  166 00000022         ;                       PERFORM A CONTEXT SWITCH (From t
                       ask level) - OSCtxSw()
  167 00000022         ;
  168 00000022         ; Note(s) : 1) OSCtxSw() is called when OS wants to perf
                       orm a task context switch.  This function
  169 00000022         ;              triggers the PendSV exception which is wh
                       ere the real work is done.
  170 00000022         ;*******************************************************
                       *************************************************
  171 00000022         
  172 00000022         OSCtxSw
  173 00000022 4817            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  174 00000024 F04F 5180       LDR              R1, =NVIC_PENDSVSET
  175 00000028 6001            STR              R1, [R0]
  176 0000002A 4770            BX               LR
  177 0000002C         
  178 0000002C         
  179 0000002C         ;*******************************************************
                       *************************************************
  180 0000002C         ;                   PERFORM A CONTEXT SWITCH (From inter
                       rupt level) - OSIntCtxSw()
  181 0000002C         ;
  182 0000002C         ; Note(s) : 1) OSIntCtxSw() is called by OSIntExit() whe
                       n it determines a context switch is needed as
  183 0000002C         ;              the result of an interrupt.  This functio
                       n simply triggers a PendSV exception which will
  184 0000002C         ;              be handled when there are no more interru



ARM Macro Assembler    Page 5 


                       pts active and interrupts are enabled.
  185 0000002C         ;*******************************************************
                       *************************************************
  186 0000002C         
  187 0000002C         OSIntCtxSw
  188 0000002C 4814            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  189 0000002E F04F 5180       LDR              R1, =NVIC_PENDSVSET
  190 00000032 6001            STR              R1, [R0]
  191 00000034 4770            BX               LR
  192 00000036         
  193 00000036         
  194 00000036         ;*******************************************************
                       *************************************************
  195 00000036         ;                                       HANDLE PendSV EX
                       CEPTION
  196 00000036         ;                                   void OS_CPU_PendSVHa
                       ndler(void)
  197 00000036         ;
  198 00000036         ; Note(s) : 1) PendSV is used to cause a context switch.
                         This is a recommended method for performing
  199 00000036         ;              context switches with Cortex-M3.  This is
                        because the Cortex-M3 auto-saves half of the
  200 00000036         ;              processor context on any exception, and r
                       estores same on return from exception.  So only
  201 00000036         ;              saving of R4-R11 is required and fixing u
                       p the stack pointers.  Using the PendSV exception
  202 00000036         ;              this way means that context saving and re
                       storing is identical whether it is initiated from
  203 00000036         ;              a thread or occurs due to an interrupt or
                        exception.
  204 00000036         ;
  205 00000036         ;           2) Pseudo-code is:
  206 00000036         ;              a) Get the process SP, if 0 then skip (go
                       to d) the saving part (first context switch);
  207 00000036         ;              b) Save remaining regs r4-r11 on process 
                       stack;
  208 00000036         ;              c) Save the process SP in its TCB, OSTCBC
                       urPtr->OSTCBStkPtr = SP;
  209 00000036         ;              d) Call OSTaskSwHook();
  210 00000036         ;              e) Get current high priority, OSPrioCur =
                        OSPrioHighRdy;
  211 00000036         ;              f) Get current ready thread TCB, OSTCBCur
                       Ptr = OSTCBHighRdyPtr;
  212 00000036         ;              g) Get new process SP from TCB, SP = OSTC
                       BHighRdyPtr->OSTCBStkPtr;
  213 00000036         ;              h) Restore R4-R11 from new process stack;
                       
  214 00000036         ;              i) Perform exception return which will re
                       store remaining context.
  215 00000036         ;
  216 00000036         ;           3) On entry into PendSV handler:
  217 00000036         ;              a) The following have been saved on the p
                       rocess stack (by processor):
  218 00000036         ;                 xPSR, PC, LR, R12, R0-R3
  219 00000036         ;              b) Processor mode is switched to Handler 
                       mode (from Thread mode)



ARM Macro Assembler    Page 6 


  220 00000036         ;              c) Stack is Main stack (switched from Pro
                       cess stack)
  221 00000036         ;              d) OSTCBCurPtr      points to the OS_TCB 
                       of the task to suspend
  222 00000036         ;                 OSTCBHighRdyPtr  points to the OS_TCB 
                       of the task to resume
  223 00000036         ;
  224 00000036         ;           4) Since PendSV is set to lowest priority in
                        the system (by OSStartHighRdy() above), we
  225 00000036         ;              know that it will only be run when no oth
                       er exception or interrupt is active, and
  226 00000036         ;              therefore safe to assume that context bei
                       ng switched out was using the process stack (PSP).
  227 00000036         ;*******************************************************
                       *************************************************
  228 00000036         
  229 00000036         PendSV_Handler
  230 00000036 B672            CPSID            I           ; Prevent interrupt
                                                            ion during context 
                                                            switch
  231 00000038 F3EF 8009       MRS              R0, PSP     ; PSP is process st
                                                            ack pointer
  232 0000003C B128            CBZ              R0, OS_CPU_PendSVHandler_nosave
 
                                                            ; Skip register sav
                                                            e the first time
  233 0000003E         
  234 0000003E 3820            SUBS             R0, R0, #0x20 ; Save remaining 
                                                            regs r4-11 on proce
                                                            ss stack
  235 00000040 E880 0FF0       STM              R0, {R4-R11}
  236 00000044         
  237 00000044 490F            LDR              R1, =OSTCBCurPtr ; OSTCBCurPtr-
                                                            >OSTCBStkPtr = SP;
  238 00000046 6809            LDR              R1, [R1]
  239 00000048 6008            STR              R0, [R1]    ; R0 is SP of proce
                                                            ss being switched o
                                                            ut
  240 0000004A         
  241 0000004A         ; At this point, entire context of process has been save
                       d
  242 0000004A         OS_CPU_PendSVHandler_nosave
  243 0000004A B500            PUSH             {R14}       ; Save LR exc_retur
                                                            n value
  244 0000004C 480E            LDR              R0, =OSTaskSwHook 
                                                            ; OSTaskSwHook();
  245 0000004E 4780            BLX              R0
  246 00000050 F85D EB04       POP              {R14}
  247 00000054         
  248 00000054 480D            LDR              R0, =OSPrioCur ; OSPrioCur   = 
                                                            OSPrioHighRdy;
  249 00000056 490E            LDR              R1, =OSPrioHighRdy
  250 00000058 780A            LDRB             R2, [R1]
  251 0000005A 7002            STRB             R2, [R0]
  252 0000005C         
  253 0000005C 4809            LDR              R0, =OSTCBCurPtr ; OSTCBCurPtr 
                                                            = OSTCBHighRdyPtr;
  254 0000005E 490D            LDR              R1, =OSTCBHighRdyPtr
  255 00000060 680A            LDR              R2, [R1]



ARM Macro Assembler    Page 7 


  256 00000062 6002            STR              R2, [R0]
  257 00000064         
  258 00000064 6810            LDR              R0, [R2]    ; R0 is new process
                                                             SP; SP = OSTCBHigh
                                                            RdyPtr->StkPtr;
  259 00000066 E890 0FF0       LDM              R0, {R4-R11} ; Restore r4-11 fr
                                                            om new process stac
                                                            k
  260 0000006A 3020            ADDS             R0, R0, #0x20
  261 0000006C F380 8809       MSR              PSP, R0     ; Load PSP with new
                                                             process SP
  262 00000070 F04E 0EF4       ORR              LR, LR, #0xF4 ; Ensure exceptio
                                                            n return uses proce
                                                            ss stack
  263 00000074 B662            CPSIE            I
  264 00000076 4770            BX               LR          ; Exception return 
                                                            will restore remain
                                                            ing context
  265 00000078         
  266 00000078                 END
              E000ED22 
              00000000 
              E000ED04 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4 --apcs=interw
ork --depend=.\objects\os_cpu_a.d -o.\objects\os_cpu_a.o -IDevice\Include --pre
define="__MICROLIB SETA 1" --predefine="__UVISION_VERSION SETA 534" --list=.\li
stings\os_cpu_a.lst ..\..\..\..\..\..\Middlewares\UCOSIII\uCOS-III\Ports\ARM-Co
rtex-M4\Generic\RealView\os_cpu_a.asm



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

CODE 00000000

Symbol: CODE
   Definitions
      At line 68 in file ..\..\..\..\..\..\Middlewares\UCOSIII\uCOS-III\Ports\A
RM-Cortex-M4\Generic\RealView\os_cpu_a.asm
   Uses
      None
Comment: CODE unused
OSCtxSw 00000022

Symbol: OSCtxSw
   Definitions
      At line 172 in file ..\..\..\..\..\..\Middlewares\UCOSIII\uCOS-III\Ports\
ARM-Cortex-M4\Generic\RealView\os_cpu_a.asm
   Uses
      At line 41 in file ..\..\..\..\..\..\Middlewares\UCOSIII\uCOS-III\Ports\A
RM-Cortex-M4\Generic\RealView\os_cpu_a.asm
Comment: OSCtxSw used once
OSIntCtxSw 0000002C

Symbol: OSIntCtxSw
   Definitions
      At line 187 in file ..\..\..\..\..\..\Middlewares\UCOSIII\uCOS-III\Ports\
ARM-Cortex-M4\Generic\RealView\os_cpu_a.asm
   Uses
      At line 42 in file ..\..\..\..\..\..\Middlewares\UCOSIII\uCOS-III\Ports\A
RM-Cortex-M4\Generic\RealView\os_cpu_a.asm
Comment: OSIntCtxSw used once
OSStartHang 00000020

Symbol: OSStartHang
   Definitions
      At line 161 in file ..\..\..\..\..\..\Middlewares\UCOSIII\uCOS-III\Ports\
ARM-Cortex-M4\Generic\RealView\os_cpu_a.asm
   Uses
      At line 162 in file ..\..\..\..\..\..\Middlewares\UCOSIII\uCOS-III\Ports\
ARM-Cortex-M4\Generic\RealView\os_cpu_a.asm
Comment: OSStartHang used once
OSStartHighRdy 00000000

Symbol: OSStartHighRdy
   Definitions
      At line 143 in file ..\..\..\..\..\..\Middlewares\UCOSIII\uCOS-III\Ports\
ARM-Cortex-M4\Generic\RealView\os_cpu_a.asm
   Uses
      At line 40 in file ..\..\..\..\..\..\Middlewares\UCOSIII\uCOS-III\Ports\A
RM-Cortex-M4\Generic\RealView\os_cpu_a.asm
Comment: OSStartHighRdy used once
OS_CPU_PendSVHandler_nosave 0000004A

Symbol: OS_CPU_PendSVHandler_nosave
   Definitions
      At line 242 in file ..\..\..\..\..\..\Middlewares\UCOSIII\uCOS-III\Ports\
ARM-Cortex-M4\Generic\RealView\os_cpu_a.asm
   Uses
      At line 232 in file ..\..\..\..\..\..\Middlewares\UCOSIII\uCOS-III\Ports\
ARM-Cortex-M4\Generic\RealView\os_cpu_a.asm
Comment: OS_CPU_PendSVHandler_nosave used once



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

PendSV_Handler 00000036

Symbol: PendSV_Handler
   Definitions
      At line 229 in file ..\..\..\..\..\..\Middlewares\UCOSIII\uCOS-III\Ports\
ARM-Cortex-M4\Generic\RealView\os_cpu_a.asm
   Uses
      At line 43 in file ..\..\..\..\..\..\Middlewares\UCOSIII\uCOS-III\Ports\A
RM-Cortex-M4\Generic\RealView\os_cpu_a.asm
Comment: PendSV_Handler used once
7 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NVIC_INT_CTRL E000ED04

Symbol: NVIC_INT_CTRL
   Definitions
      At line 55 in file ..\..\..\..\..\..\Middlewares\UCOSIII\uCOS-III\Ports\A
RM-Cortex-M4\Generic\RealView\os_cpu_a.asm
   Uses
      At line 155 in file ..\..\..\..\..\..\Middlewares\UCOSIII\uCOS-III\Ports\
ARM-Cortex-M4\Generic\RealView\os_cpu_a.asm
      At line 173 in file ..\..\..\..\..\..\Middlewares\UCOSIII\uCOS-III\Ports\
ARM-Cortex-M4\Generic\RealView\os_cpu_a.asm
      At line 188 in file ..\..\..\..\..\..\Middlewares\UCOSIII\uCOS-III\Ports\
ARM-Cortex-M4\Generic\RealView\os_cpu_a.asm

NVIC_PENDSVSET 10000000

Symbol: NVIC_PENDSVSET
   Definitions
      At line 58 in file ..\..\..\..\..\..\Middlewares\UCOSIII\uCOS-III\Ports\A
RM-Cortex-M4\Generic\RealView\os_cpu_a.asm
   Uses
      At line 156 in file ..\..\..\..\..\..\Middlewares\UCOSIII\uCOS-III\Ports\
ARM-Cortex-M4\Generic\RealView\os_cpu_a.asm
      At line 174 in file ..\..\..\..\..\..\Middlewares\UCOSIII\uCOS-III\Ports\
ARM-Cortex-M4\Generic\RealView\os_cpu_a.asm
      At line 189 in file ..\..\..\..\..\..\Middlewares\UCOSIII\uCOS-III\Ports\
ARM-Cortex-M4\Generic\RealView\os_cpu_a.asm

NVIC_PENDSV_PRI 000000FF

Symbol: NVIC_PENDSV_PRI
   Definitions
      At line 57 in file ..\..\..\..\..\..\Middlewares\UCOSIII\uCOS-III\Ports\A
RM-Cortex-M4\Generic\RealView\os_cpu_a.asm
   Uses
      At line 145 in file ..\..\..\..\..\..\Middlewares\UCOSIII\uCOS-III\Ports\
ARM-Cortex-M4\Generic\RealView\os_cpu_a.asm
Comment: NVIC_PENDSV_PRI used once
NVIC_SYSPRI14 E000ED22

Symbol: NVIC_SYSPRI14
   Definitions
      At line 56 in file ..\..\..\..\..\..\Middlewares\UCOSIII\uCOS-III\Ports\A
RM-Cortex-M4\Generic\RealView\os_cpu_a.asm
   Uses
      At line 144 in file ..\..\..\..\..\..\Middlewares\UCOSIII\uCOS-III\Ports\
ARM-Cortex-M4\Generic\RealView\os_cpu_a.asm
Comment: NVIC_SYSPRI14 used once
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

OSIntExit 00000000

Symbol: OSIntExit
   Definitions
      At line 35 in file ..\..\..\..\..\..\Middlewares\UCOSIII\uCOS-III\Ports\A
RM-Cortex-M4\Generic\RealView\os_cpu_a.asm
   Uses
      None
Comment: OSIntExit unused
OSPrioCur 00000000

Symbol: OSPrioCur
   Definitions
      At line 31 in file ..\..\..\..\..\..\Middlewares\UCOSIII\uCOS-III\Ports\A
RM-Cortex-M4\Generic\RealView\os_cpu_a.asm
   Uses
      At line 248 in file ..\..\..\..\..\..\Middlewares\UCOSIII\uCOS-III\Ports\
ARM-Cortex-M4\Generic\RealView\os_cpu_a.asm
Comment: OSPrioCur used once
OSPrioHighRdy 00000000

Symbol: OSPrioHighRdy
   Definitions
      At line 32 in file ..\..\..\..\..\..\Middlewares\UCOSIII\uCOS-III\Ports\A
RM-Cortex-M4\Generic\RealView\os_cpu_a.asm
   Uses
      At line 249 in file ..\..\..\..\..\..\Middlewares\UCOSIII\uCOS-III\Ports\
ARM-Cortex-M4\Generic\RealView\os_cpu_a.asm
Comment: OSPrioHighRdy used once
OSRunning 00000000

Symbol: OSRunning
   Definitions
      At line 30 in file ..\..\..\..\..\..\Middlewares\UCOSIII\uCOS-III\Ports\A
RM-Cortex-M4\Generic\RealView\os_cpu_a.asm
   Uses
      None
Comment: OSRunning unused
OSTCBCurPtr 00000000

Symbol: OSTCBCurPtr
   Definitions
      At line 33 in file ..\..\..\..\..\..\Middlewares\UCOSIII\uCOS-III\Ports\A
RM-Cortex-M4\Generic\RealView\os_cpu_a.asm
   Uses
      At line 237 in file ..\..\..\..\..\..\Middlewares\UCOSIII\uCOS-III\Ports\
ARM-Cortex-M4\Generic\RealView\os_cpu_a.asm
      At line 253 in file ..\..\..\..\..\..\Middlewares\UCOSIII\uCOS-III\Ports\
ARM-Cortex-M4\Generic\RealView\os_cpu_a.asm

OSTCBHighRdyPtr 00000000

Symbol: OSTCBHighRdyPtr
   Definitions
      At line 34 in file ..\..\..\..\..\..\Middlewares\UCOSIII\uCOS-III\Ports\A
RM-Cortex-M4\Generic\RealView\os_cpu_a.asm
   Uses
      At line 254 in file ..\..\..\..\..\..\Middlewares\UCOSIII\uCOS-III\Ports\
ARM-Cortex-M4\Generic\RealView\os_cpu_a.asm



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

Comment: OSTCBHighRdyPtr used once
OSTaskSwHook 00000000

Symbol: OSTaskSwHook
   Definitions
      At line 36 in file ..\..\..\..\..\..\Middlewares\UCOSIII\uCOS-III\Ports\A
RM-Cortex-M4\Generic\RealView\os_cpu_a.asm
   Uses
      At line 244 in file ..\..\..\..\..\..\Middlewares\UCOSIII\uCOS-III\Ports\
ARM-Cortex-M4\Generic\RealView\os_cpu_a.asm
Comment: OSTaskSwHook used once
OS_CPU_ExceptStkBase 00000000

Symbol: OS_CPU_ExceptStkBase
   Definitions
      At line 37 in file ..\..\..\..\..\..\Middlewares\UCOSIII\uCOS-III\Ports\A
RM-Cortex-M4\Generic\RealView\os_cpu_a.asm
   Uses
      At line 151 in file ..\..\..\..\..\..\Middlewares\UCOSIII\uCOS-III\Ports\
ARM-Cortex-M4\Generic\RealView\os_cpu_a.asm
Comment: OS_CPU_ExceptStkBase used once
8 symbols
353 symbols in table

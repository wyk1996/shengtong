<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Thu Apr 11 08:42:23 2024
<BR><P>
<H3>Maximum Stack Usage =        804 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
AppTask4GSend &rArr; _4G_SendCardInfo &rArr; HY_SendCardInfo &rArr; HYFreamSend &rArr; ModuleSIM7600_SendData &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[2fb]">CPU_IntDis</a>
 <LI><a href="#[2fc]">CPU_IntEn</a>
 <LI><a href="#[180]">CPU_SR_Save</a>
 <LI><a href="#[182]">CPU_SR_Restore</a>
 <LI><a href="#[2fd]">CPU_WaitForInt</a>
 <LI><a href="#[2fe]">CPU_WaitForExcept</a>
 <LI><a href="#[251]">CPU_CntLeadZeros</a>
 <LI><a href="#[2ff]">CPU_CntTrailZeros</a>
 <LI><a href="#[300]">CPU_RevBits</a>
 <LI><a href="#[22f]">OSStartHighRdy</a>
 <LI><a href="#[22b]">OSCtxSw</a>
 <LI><a href="#[219]">OSIntCtxSw</a>
 <LI><a href="#[58]">PendSV_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[56]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[56]">SVC_Handler</a><BR>
 <LI><a href="#[8e]">ACC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8e]">ACC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[8e]">ACC_IRQHandler</a> from startup_at32f415cbt7.o(.text) referenced from startup_at32f415cbt7.o(RESET)
 <LI><a href="#[6c]">ADC1_2_IRQHandler</a> from startup_at32f415cbt7.o(.text) referenced from startup_at32f415cbt7.o(RESET)
 <LI><a href="#[d2]">Amount_charging</a> from dwin_com_pro.o(i.Amount_charging) referenced from dwin_com_pro.o(.constdata)
 <LI><a href="#[97]">AppTask4GMain</a> from 4gmain.o(i.AppTask4GMain) referenced from main.o(i.AppTaskCreate)
 <LI><a href="#[98]">AppTask4GRecv</a> from 4grecv.o(i.AppTask4GRecv) referenced from main.o(i.AppTaskCreate)
 <LI><a href="#[99]">AppTask4GSend</a> from 4gsend.o(i.AppTask4GSend) referenced from main.o(i.AppTaskCreate)
 <LI><a href="#[94]">AppTaskCard</a> from read_nuid.o(i.AppTaskCard) referenced from main.o(i.AppTaskCreate)
 <LI><a href="#[95]">AppTaskCharge</a> from chtask.o(i.AppTaskCharge) referenced from main.o(i.AppTaskCreate)
 <LI><a href="#[96]">AppTaskDwin</a> from dwin_com_pro.o(i.AppTaskDwin) referenced from main.o(i.AppTaskCreate)
 <LI><a href="#[a2]">AppTaskStart</a> from main.o(i.AppTaskStart) referenced from main.o(i.main)
 <LI><a href="#[9a]">AppTaskdlt645</a> from dlt645_port.o(i.AppTaskdlt645) referenced from main.o(i.AppTaskCreate)
 <LI><a href="#[54]">BusFault_Handler</a> from at32f4xx_it.o(i.BusFault_Handler) referenced from startup_at32f415cbt7.o(RESET)
 <LI><a href="#[6e]">CAN1_RX0_IRQHandler</a> from startup_at32f415cbt7.o(.text) referenced from startup_at32f415cbt7.o(RESET)
 <LI><a href="#[6f]">CAN1_RX1_IRQHandler</a> from startup_at32f415cbt7.o(.text) referenced from startup_at32f415cbt7.o(RESET)
 <LI><a href="#[70]">CAN1_SCE_IRQHandler</a> from startup_at32f415cbt7.o(.text) referenced from startup_at32f415cbt7.o(RESET)
 <LI><a href="#[6d]">CAN1_TX_IRQHandler</a> from startup_at32f415cbt7.o(.text) referenced from startup_at32f415cbt7.o(RESET)
 <LI><a href="#[8c]">COMP1_IRQHandler</a> from startup_at32f415cbt7.o(.text) referenced from startup_at32f415cbt7.o(RESET)
 <LI><a href="#[8d]">COMP2_IRQHandler</a> from startup_at32f415cbt7.o(.text) referenced from startup_at32f415cbt7.o(RESET)
 <LI><a href="#[cf]">Company_code</a> from dwin_com_pro.o(i.Company_code) referenced from dwin_com_pro.o(.constdata)
 <LI><a href="#[65]">DMA1_Channel1_IRQHandler</a> from startup_at32f415cbt7.o(.text) referenced from startup_at32f415cbt7.o(RESET)
 <LI><a href="#[66]">DMA1_Channel2_IRQHandler</a> from startup_at32f415cbt7.o(.text) referenced from startup_at32f415cbt7.o(RESET)
 <LI><a href="#[67]">DMA1_Channel3_IRQHandler</a> from startup_at32f415cbt7.o(.text) referenced from startup_at32f415cbt7.o(RESET)
 <LI><a href="#[68]">DMA1_Channel4_IRQHandler</a> from startup_at32f415cbt7.o(.text) referenced from startup_at32f415cbt7.o(RESET)
 <LI><a href="#[69]">DMA1_Channel5_IRQHandler</a> from startup_at32f415cbt7.o(.text) referenced from startup_at32f415cbt7.o(RESET)
 <LI><a href="#[6a]">DMA1_Channel6_IRQHandler</a> from startup_at32f415cbt7.o(.text) referenced from startup_at32f415cbt7.o(RESET)
 <LI><a href="#[6b]">DMA1_Channel7_IRQHandler</a> from startup_at32f415cbt7.o(.text) referenced from startup_at32f415cbt7.o(RESET)
 <LI><a href="#[87]">DMA2_Channel1_IRQHandler</a> from startup_at32f415cbt7.o(.text) referenced from startup_at32f415cbt7.o(RESET)
 <LI><a href="#[88]">DMA2_Channel2_IRQHandler</a> from startup_at32f415cbt7.o(.text) referenced from startup_at32f415cbt7.o(RESET)
 <LI><a href="#[89]">DMA2_Channel3_IRQHandler</a> from startup_at32f415cbt7.o(.text) referenced from startup_at32f415cbt7.o(RESET)
 <LI><a href="#[8a]">DMA2_Channel4_5_IRQHandler</a> from startup_at32f415cbt7.o(.text) referenced from startup_at32f415cbt7.o(RESET)
 <LI><a href="#[8f]">DMA2_Channel6_7_IRQHandler</a> from startup_at32f415cbt7.o(.text) referenced from startup_at32f415cbt7.o(RESET)
 <LI><a href="#[57]">DebugMon_Handler</a> from at32f4xx_it.o(i.DebugMon_Handler) referenced from startup_at32f415cbt7.o(RESET)
 <LI><a href="#[83]">ERTCAlarm_IRQHandler</a> from startup_at32f415cbt7.o(.text) referenced from startup_at32f415cbt7.o(RESET)
 <LI><a href="#[5d]">ERTC_WKUP_IRQHandler</a> from startup_at32f415cbt7.o(.text) referenced from startup_at32f415cbt7.o(RESET)
 <LI><a href="#[60]">EXTI0_IRQHandler</a> from startup_at32f415cbt7.o(.text) referenced from startup_at32f415cbt7.o(RESET)
 <LI><a href="#[82]">EXTI15_10_IRQHandler</a> from startup_at32f415cbt7.o(.text) referenced from startup_at32f415cbt7.o(RESET)
 <LI><a href="#[61]">EXTI1_IRQHandler</a> from startup_at32f415cbt7.o(.text) referenced from startup_at32f415cbt7.o(RESET)
 <LI><a href="#[62]">EXTI2_IRQHandler</a> from startup_at32f415cbt7.o(.text) referenced from startup_at32f415cbt7.o(RESET)
 <LI><a href="#[63]">EXTI3_IRQHandler</a> from startup_at32f415cbt7.o(.text) referenced from startup_at32f415cbt7.o(RESET)
 <LI><a href="#[64]">EXTI4_IRQHandler</a> from startup_at32f415cbt7.o(.text) referenced from startup_at32f415cbt7.o(RESET)
 <LI><a href="#[71]">EXTI9_5_IRQHandler</a> from startup_at32f415cbt7.o(.text) referenced from startup_at32f415cbt7.o(RESET)
 <LI><a href="#[d1]">Electric_charing</a> from dwin_com_pro.o(i.Electric_charing) referenced from dwin_com_pro.o(.constdata)
 <LI><a href="#[5e]">FLASH_IRQHandler</a> from startup_at32f415cbt7.o(.text) referenced from startup_at32f415cbt7.o(RESET)
 <LI><a href="#[9]">HYDisplayMenu1</a> from dispkeyfunction.o(i.HYDisplayMenu1) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[1b]">HYDisplayMenu10</a> from dispkeyfunction.o(i.HYDisplayMenu10) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[1d]">HYDisplayMenu11</a> from dispkeyfunction.o(i.HYDisplayMenu11) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[1f]">HYDisplayMenu12</a> from dispkeyfunction.o(i.HYDisplayMenu12) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[21]">HYDisplayMenu13</a> from dispkeyfunction.o(i.HYDisplayMenu13) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[23]">HYDisplayMenu14</a> from dispkeyfunction.o(i.HYDisplayMenu14) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[25]">HYDisplayMenu15</a> from dispkeyfunction.o(i.HYDisplayMenu15) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[27]">HYDisplayMenu16</a> from dispkeyfunction.o(i.HYDisplayMenu16) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[29]">HYDisplayMenu17</a> from dispkeyfunction.o(i.HYDisplayMenu17) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[2b]">HYDisplayMenu18</a> from dispkeyfunction.o(i.HYDisplayMenu18) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[2d]">HYDisplayMenu19</a> from dispkeyfunction.o(i.HYDisplayMenu19) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[b]">HYDisplayMenu2</a> from dispkeyfunction.o(i.HYDisplayMenu2) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[2f]">HYDisplayMenu20</a> from dispkeyfunction.o(i.HYDisplayMenu20) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[31]">HYDisplayMenu21</a> from dispkeyfunction.o(i.HYDisplayMenu21) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[33]">HYDisplayMenu22</a> from dispkeyfunction.o(i.HYDisplayMenu22) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[35]">HYDisplayMenu23</a> from dispkeyfunction.o(i.HYDisplayMenu23) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[37]">HYDisplayMenu24</a> from dispkeyfunction.o(i.HYDisplayMenu24) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[7]">HYDisplayMenu25</a> from dispkeyfunction.o(i.HYDisplayMenu25) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[39]">HYDisplayMenu26</a> from dispkeyfunction.o(i.HYDisplayMenu26) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[3b]">HYDisplayMenu27</a> from dispkeyfunction.o(i.HYDisplayMenu27) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[3d]">HYDisplayMenu28</a> from dispkeyfunction.o(i.HYDisplayMenu28) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[d]">HYDisplayMenu3</a> from dispkeyfunction.o(i.HYDisplayMenu3) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[3f]">HYDisplayMenu30</a> from dispkeyfunction.o(i.HYDisplayMenu30) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[41]">HYDisplayMenu31</a> from dispkeyfunction.o(i.HYDisplayMenu31) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[43]">HYDisplayMenu32</a> from dispkeyfunction.o(i.HYDisplayMenu32) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[45]">HYDisplayMenu33</a> from dispkeyfunction.o(i.HYDisplayMenu33) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[47]">HYDisplayMenu34</a> from dispkeyfunction.o(i.HYDisplayMenu34) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[49]">HYDisplayMenu35</a> from dispkeyfunction.o(i.HYDisplayMenu35) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[4b]">HYDisplayMenu36</a> from dispkeyfunction.o(i.HYDisplayMenu36) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[4d]">HYDisplayMenu37</a> from dispkeyfunction.o(i.HYDisplayMenu37) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[4f]">HYDisplayMenu38</a> from dispkeyfunction.o(i.HYDisplayMenu38) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[f]">HYDisplayMenu4</a> from dispkeyfunction.o(i.HYDisplayMenu4) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[11]">HYDisplayMenu5</a> from dispkeyfunction.o(i.HYDisplayMenu5) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[13]">HYDisplayMenu6</a> from dispkeyfunction.o(i.HYDisplayMenu6) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[15]">HYDisplayMenu7</a> from dispkeyfunction.o(i.HYDisplayMenu7) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[17]">HYDisplayMenu8</a> from dispkeyfunction.o(i.HYDisplayMenu8) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[19]">HYDisplayMenu9</a> from dispkeyfunction.o(i.HYDisplayMenu9) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[8]">HYKeyEvent1</a> from dispkey.o(i.HYKeyEvent1) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[1a]">HYKeyEvent10</a> from dispkey.o(i.HYKeyEvent10) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[1c]">HYKeyEvent11</a> from dispkey.o(i.HYKeyEvent11) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[1e]">HYKeyEvent12</a> from dispkey.o(i.HYKeyEvent12) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[20]">HYKeyEvent13</a> from dispkey.o(i.HYKeyEvent13) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[22]">HYKeyEvent14</a> from dispkey.o(i.HYKeyEvent14) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[24]">HYKeyEvent15</a> from dispkey.o(i.HYKeyEvent15) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[26]">HYKeyEvent16</a> from dispkey.o(i.HYKeyEvent16) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[28]">HYKeyEvent17</a> from dispkey.o(i.HYKeyEvent17) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[2a]">HYKeyEvent18</a> from dispkey.o(i.HYKeyEvent18) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[2c]">HYKeyEvent19</a> from dispkey.o(i.HYKeyEvent19) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[a]">HYKeyEvent2</a> from dispkey.o(i.HYKeyEvent2) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[2e]">HYKeyEvent20</a> from dispkey.o(i.HYKeyEvent20) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[30]">HYKeyEvent21</a> from dispkey.o(i.HYKeyEvent21) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[32]">HYKeyEvent22</a> from dispkey.o(i.HYKeyEvent22) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[34]">HYKeyEvent23</a> from dispkey.o(i.HYKeyEvent23) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[36]">HYKeyEvent24</a> from dispkey.o(i.HYKeyEvent24) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[6]">HYKeyEvent25</a> from dispkey.o(i.HYKeyEvent25) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[38]">HYKeyEvent26</a> from dispkey.o(i.HYKeyEvent26) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[3a]">HYKeyEvent27</a> from dispkey.o(i.HYKeyEvent27) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[3c]">HYKeyEvent28</a> from dispkey.o(i.HYKeyEvent28) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[c]">HYKeyEvent3</a> from dispkey.o(i.HYKeyEvent3) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[3e]">HYKeyEvent30</a> from dispkey.o(i.HYKeyEvent30) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[40]">HYKeyEvent31</a> from dispkey.o(i.HYKeyEvent31) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[42]">HYKeyEvent32</a> from dispkey.o(i.HYKeyEvent32) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[44]">HYKeyEvent33</a> from dispkey.o(i.HYKeyEvent33) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[46]">HYKeyEvent34</a> from dispkey.o(i.HYKeyEvent34) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[48]">HYKeyEvent35</a> from dispkey.o(i.HYKeyEvent35) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[4a]">HYKeyEvent36</a> from dispkey.o(i.HYKeyEvent36) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[4c]">HYKeyEvent37</a> from dispkey.o(i.HYKeyEvent37) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[4e]">HYKeyEvent38</a> from dispkey.o(i.HYKeyEvent38) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[e]">HYKeyEvent4</a> from dispkey.o(i.HYKeyEvent4) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[10]">HYKeyEvent5</a> from dispkey.o(i.HYKeyEvent5) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[12]">HYKeyEvent6</a> from dispkey.o(i.HYKeyEvent6) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[14]">HYKeyEvent7</a> from dispkey.o(i.HYKeyEvent7) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[16]">HYKeyEvent8</a> from dispkey.o(i.HYKeyEvent8) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[18]">HYKeyEvent9</a> from dispkey.o(i.HYKeyEvent9) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[ae]">HY_RecvCardStart</a> from hyframe.o(i.HY_RecvCardStart) referenced from hyframe.o(.constdata)
 <LI><a href="#[aa]">HY_RecvDevFailAck</a> from hyframe.o(i.HY_RecvDevFailAck) referenced from hyframe.o(.constdata)
 <LI><a href="#[a6]">HY_RecvDevInfoAck</a> from hyframe.o(i.HY_RecvDevInfoAck) referenced from hyframe.o(.constdata)
 <LI><a href="#[a9]">HY_RecvDevStopAck</a> from hyframe.o(i.HY_RecvDevStopAck) referenced from hyframe.o(.constdata)
 <LI><a href="#[a5]">HY_RecvHearAck</a> from hyframe.o(i.HY_RecvHearAck) referenced from hyframe.o(.constdata)
 <LI><a href="#[ac]">HY_RecvQueryBill</a> from hyframe.o(i.HY_RecvQueryBill) referenced from hyframe.o(.constdata)
 <LI><a href="#[ad]">HY_RecvQueryRate</a> from hyframe.o(i.HY_RecvQueryRate) referenced from hyframe.o(.constdata)
 <LI><a href="#[ab]">HY_RecvRateSet</a> from hyframe.o(i.HY_RecvRateSet) referenced from hyframe.o(.constdata)
 <LI><a href="#[a8]">HY_RecvRecordAck</a> from hyframe.o(i.HY_RecvRecordAck) referenced from hyframe.o(.constdata)
 <LI><a href="#[a7]">HY_RecvRegisterAck</a> from hyframe.o(i.HY_RecvRegisterAck) referenced from hyframe.o(.constdata)
 <LI><a href="#[b0]">HY_RecvReset</a> from hyframe.o(i.HY_RecvReset) referenced from hyframe.o(.constdata)
 <LI><a href="#[a3]">HY_RecvStartCharge</a> from hyframe.o(i.HY_RecvStartCharge) referenced from hyframe.o(.constdata)
 <LI><a href="#[a4]">HY_RecvStopCharge</a> from hyframe.o(i.HY_RecvStopCharge) referenced from hyframe.o(.constdata)
 <LI><a href="#[af]">HY_RecvUpdata</a> from hyframe.o(i.HY_RecvUpdata) referenced from hyframe.o(.constdata)
 <LI><a href="#[2]">HY_SendDevStateA</a> from hyframe.o(i.HY_SendDevStateA) referenced 2 times from hyframe.o(.data)
 <LI><a href="#[1]">HY_SendHear</a> from hyframe.o(i.HY_SendHear) referenced 2 times from hyframe.o(.data)
 <LI><a href="#[0]">HY_SendRegister</a> from hyframe.o(i.HY_SendRegister) referenced 2 times from hyframe.o(.data)
 <LI><a href="#[52]">HardFault_Handler</a> from at32f4xx_it.o(i.HardFault_Handler) referenced from startup_at32f415cbt7.o(RESET)
 <LI><a href="#[7a]">I2C1_ER_IRQHandler</a> from startup_at32f415cbt7.o(.text) referenced from startup_at32f415cbt7.o(RESET)
 <LI><a href="#[79]">I2C1_EV_IRQHandler</a> from startup_at32f415cbt7.o(.text) referenced from startup_at32f415cbt7.o(RESET)
 <LI><a href="#[7c]">I2C2_ER_IRQHandler</a> from startup_at32f415cbt7.o(.text) referenced from startup_at32f415cbt7.o(RESET)
 <LI><a href="#[7b]">I2C2_EV_IRQHandler</a> from startup_at32f415cbt7.o(.text) referenced from startup_at32f415cbt7.o(RESET)
 <LI><a href="#[53]">MemManage_Handler</a> from at32f4xx_it.o(i.MemManage_Handler) referenced from startup_at32f415cbt7.o(RESET)
 <LI><a href="#[c7]">Munu12_CodeDispose</a> from dwin_com_pro.o(i.Munu12_CodeDispose) referenced from dwin_com_pro.o(.constdata)
 <LI><a href="#[c8]">Munu13_DevnumDispose</a> from dwin_com_pro.o(i.Munu13_DevnumDispose) referenced from dwin_com_pro.o(.constdata)
 <LI><a href="#[ca]">Munu13_IP1Sert</a> from dwin_com_pro.o(i.Munu13_IP1Sert) referenced from dwin_com_pro.o(.constdata)
 <LI><a href="#[cb]">Munu13_IP2Sert</a> from dwin_com_pro.o(i.Munu13_IP2Sert) referenced from dwin_com_pro.o(.constdata)
 <LI><a href="#[cc]">Munu13_IP3Sert</a> from dwin_com_pro.o(i.Munu13_IP3Sert) referenced from dwin_com_pro.o(.constdata)
 <LI><a href="#[cd]">Munu13_IP4Sert</a> from dwin_com_pro.o(i.Munu13_IP4Sert) referenced from dwin_com_pro.o(.constdata)
 <LI><a href="#[c9]">Munu13_PortSert</a> from dwin_com_pro.o(i.Munu13_PortSert) referenced from dwin_com_pro.o(.constdata)
 <LI><a href="#[51]">NMI_Handler</a> from at32f4xx_it.o(i.NMI_Handler) referenced from startup_at32f415cbt7.o(RESET)
 <LI><a href="#[93]">OSTaskSwHook</a> from os_cpu_c.o(i.OSTaskSwHook) referenced from os_cpu_a.o(CODE)
 <LI><a href="#[9c]">OS_IdleTask</a> from os_core.o(i.OS_IdleTask) referenced from os_core.o(i.OS_IdleTaskInit)
 <LI><a href="#[9d]">OS_StatTask</a> from os_stat.o(i.OS_StatTask) referenced from os_stat.o(i.OS_StatTaskInit)
 <LI><a href="#[9b]">OS_TaskReturn</a> from os_task.o(i.OS_TaskReturn) referenced from os_cpu_c.o(i.OSTaskStkInit)
 <LI><a href="#[9e]">OS_TickTask</a> from os_tick.o(i.OS_TickTask) referenced from os_tick.o(i.OS_TickTaskInit)
 <LI><a href="#[9f]">OS_TmrTask</a> from os_tmr.o(i.OS_TmrTask) referenced from os_tmr.o(i.OS_TmrInit)
 <LI><a href="#[5b]">PVD_IRQHandler</a> from startup_at32f415cbt7.o(.text) referenced from startup_at32f415cbt7.o(RESET)
 <LI><a href="#[58]">PendSV_Handler</a> from os_cpu_a.o(CODE) referenced from startup_at32f415cbt7.o(RESET)
 <LI><a href="#[5f]">RCC_IRQHandler</a> from startup_at32f415cbt7.o(.text) referenced from startup_at32f415cbt7.o(RESET)
 <LI><a href="#[b3]">Recv_AT_CGDCONT_Ack</a> from modulea7680c.o(i.Recv_AT_CGDCONT_Ack) referenced from modulea7680c.o(.constdata)
 <LI><a href="#[b2]">Recv_AT_CIMI_Ack</a> from modulea7680c.o(i.Recv_AT_CIMI_Ack) referenced from modulea7680c.o(.constdata)
 <LI><a href="#[b4]">Recv_AT_CIPMODE_Ack</a> from modulea7680c.o(i.Recv_AT_CIPMODE_Ack) referenced from modulea7680c.o(.constdata)
 <LI><a href="#[b1]">Recv_AT_CSQ_Ack</a> from modulea7680c.o(i.Recv_AT_CSQ_Ack) referenced from modulea7680c.o(.constdata)
 <LI><a href="#[b6]">Recv_AT_ConnectServer0Cmd_Ack</a> from modulea7680c.o(i.Recv_AT_ConnectServer0Cmd_Ack) referenced from modulea7680c.o(.constdata)
 <LI><a href="#[b8]">Recv_AT_ConnectServer0_Ack</a> from modulea7680c.o(i.Recv_AT_ConnectServer0_Ack) referenced from modulea7680c.o(.constdata)
 <LI><a href="#[b7]">Recv_AT_ConnectServer1Cmd_Ack</a> from modulea7680c.o(i.Recv_AT_ConnectServer1Cmd_Ack) referenced from modulea7680c.o(.constdata)
 <LI><a href="#[b9]">Recv_AT_ConnectServer1_Ack</a> from modulea7680c.o(i.Recv_AT_ConnectServer1_Ack) referenced from modulea7680c.o(.constdata)
 <LI><a href="#[ba]">Recv_AT_EnterATCmd_Ack</a> from modulea7680c.o(i.Recv_AT_EnterATCmd_Ack) referenced from modulea7680c.o(.constdata)
 <LI><a href="#[b5]">Recv_AT_NETOPEN_Ack</a> from modulea7680c.o(i.Recv_AT_NETOPEN_Ack) referenced from modulea7680c.o(.constdata)
 <LI><a href="#[bd]">Recv_AT_ReRecv0Cmd_Ack</a> from modulea7680c.o(i.Recv_AT_ReRecv0Cmd_Ack) referenced from modulea7680c.o(.constdata)
 <LI><a href="#[be]">Recv_AT_ReRecv1Cmd_Ack</a> from modulea7680c.o(i.Recv_AT_ReRecv1Cmd_Ack) referenced from modulea7680c.o(.constdata)
 <LI><a href="#[bb]">Recv_AT_SendAck0Cmd_Ack</a> from modulea7680c.o(i.Recv_AT_SendAck0Cmd_Ack) referenced from modulea7680c.o(.constdata)
 <LI><a href="#[bc]">Recv_AT_SendAck1Cmd_Ack</a> from modulea7680c.o(i.Recv_AT_SendAck1Cmd_Ack) referenced from modulea7680c.o(.constdata)
 <LI><a href="#[bf]">Recv_AT_SetReAct_Ack</a> from modulea7680c.o(i.Recv_AT_SetReAct_Ack) referenced from modulea7680c.o(.constdata)
 <LI><a href="#[c0]">Recv_ActRecv0_Ack</a> from modulea7680c.o(i.Recv_ActRecv0_Ack) referenced from modulea7680c.o(.constdata)
 <LI><a href="#[c1]">Recv_ActRecv1_Ack</a> from modulea7680c.o(i.Recv_ActRecv1_Ack) referenced from modulea7680c.o(.constdata)
 <LI><a href="#[c3]">Recv_HttpConect_Ack</a> from modulea7680c.o(i.Recv_HttpConect_Ack) referenced from modulea7680c.o(.constdata)
 <LI><a href="#[c4]">Recv_HttpGet_Ack</a> from modulea7680c.o(i.Recv_HttpGet_Ack) referenced from modulea7680c.o(.constdata)
 <LI><a href="#[c2]">Recv_HttpStart_Ack</a> from modulea7680c.o(i.Recv_HttpStart_Ack) referenced from modulea7680c.o(.constdata)
 <LI><a href="#[c6]">Recv_ReadData_Ack</a> from modulea7680c.o(i.Recv_ReadData_Ack) referenced from modulea7680c.o(.constdata)
 <LI><a href="#[c5]">Recv_ReadDone_Ack</a> from modulea7680c.o(i.Recv_ReadDone_Ack) referenced from modulea7680c.o(.constdata)
 <LI><a href="#[50]">Reset_Handler</a> from startup_at32f415cbt7.o(.text) referenced from startup_at32f415cbt7.o(RESET)
 <LI><a href="#[85]">SDIO_IRQHandler</a> from startup_at32f415cbt7.o(.text) referenced from startup_at32f415cbt7.o(RESET)
 <LI><a href="#[7d]">SPI1_IRQHandler</a> from startup_at32f415cbt7.o(.text) referenced from startup_at32f415cbt7.o(RESET)
 <LI><a href="#[7e]">SPI2_IRQHandler</a> from startup_at32f415cbt7.o(.text) referenced from startup_at32f415cbt7.o(RESET)
 <LI><a href="#[56]">SVC_Handler</a> from startup_at32f415cbt7.o(.text) referenced from startup_at32f415cbt7.o(RESET)
 <LI><a href="#[59]">SysTick_Handler</a> from delay.o(i.SysTick_Handler) referenced from startup_at32f415cbt7.o(RESET)
 <LI><a href="#[91]">SystemInit</a> from system_at32f4xx.o(i.SystemInit) referenced from startup_at32f415cbt7.o(.text)
 <LI><a href="#[5c]">TAMP_STAMP_IRQHandler</a> from startup_at32f415cbt7.o(.text) referenced from startup_at32f415cbt7.o(RESET)
 <LI><a href="#[72]">TMR1_BRK_TMR9_IRQHandler</a> from startup_at32f415cbt7.o(.text) referenced from startup_at32f415cbt7.o(RESET)
 <LI><a href="#[75]">TMR1_CC_IRQHandler</a> from startup_at32f415cbt7.o(.text) referenced from startup_at32f415cbt7.o(RESET)
 <LI><a href="#[73]">TMR1_OV_TMR10_IRQHandler</a> from startup_at32f415cbt7.o(.text) referenced from startup_at32f415cbt7.o(RESET)
 <LI><a href="#[74]">TMR1_TRG_COM_TMR11_IRQHandler</a> from startup_at32f415cbt7.o(.text) referenced from startup_at32f415cbt7.o(RESET)
 <LI><a href="#[76]">TMR2_GLOBAL_IRQHandler</a> from startup_at32f415cbt7.o(.text) referenced from startup_at32f415cbt7.o(RESET)
 <LI><a href="#[77]">TMR3_GLOBAL_IRQHandler</a> from timer.o(i.TMR3_GLOBAL_IRQHandler) referenced from startup_at32f415cbt7.o(RESET)
 <LI><a href="#[78]">TMR4_GLOBAL_IRQHandler</a> from timer.o(i.TMR4_GLOBAL_IRQHandler) referenced from startup_at32f415cbt7.o(RESET)
 <LI><a href="#[86]">TMR5_GLOBAL_IRQHandler</a> from startup_at32f415cbt7.o(.text) referenced from startup_at32f415cbt7.o(RESET)
 <LI><a href="#[d3]">Time_charging</a> from dwin_com_pro.o(i.Time_charging) referenced from dwin_com_pro.o(.constdata)
 <LI><a href="#[d4]">Timing_charging</a> from dwin_com_pro.o(i.Timing_charging) referenced from dwin_com_pro.o(.constdata)
 <LI><a href="#[7f]">USART1_IRQHandler</a> from uart1.o(i.USART1_IRQHandler) referenced from startup_at32f415cbt7.o(RESET)
 <LI><a href="#[80]">USART2_IRQHandler</a> from uart2.o(i.USART2_IRQHandler) referenced from startup_at32f415cbt7.o(RESET)
 <LI><a href="#[81]">USART3_IRQHandler</a> from 485_1.o(i.USART3_IRQHandler) referenced from startup_at32f415cbt7.o(RESET)
 <LI><a href="#[8b]">USBOTG_IRQHandler</a> from startup_at32f415cbt7.o(.text) referenced from startup_at32f415cbt7.o(RESET)
 <LI><a href="#[84]">USBWakeUp_IRQHandler</a> from startup_at32f415cbt7.o(.text) referenced from startup_at32f415cbt7.o(RESET)
 <LI><a href="#[55]">UsageFault_Handler</a> from at32f4xx_it.o(i.UsageFault_Handler) referenced from startup_at32f415cbt7.o(RESET)
 <LI><a href="#[5a]">WWDG_IRQHandler</a> from startup_at32f415cbt7.o(.text) referenced from startup_at32f415cbt7.o(RESET)
 <LI><a href="#[5]">ZF_SendDevState</a> from zfframe.o(i.ZF_SendDevState) referenced 2 times from zfframe.o(.data)
 <LI><a href="#[4]">ZF_SendHear</a> from zfframe.o(i.ZF_SendHear) referenced 2 times from zfframe.o(.data)
 <LI><a href="#[3]">ZF_SendRegister</a> from zfframe.o(i.ZF_SendRegister) referenced 2 times from zfframe.o(.data)
 <LI><a href="#[92]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_at32f415cbt7.o(.text)
 <LI><a href="#[a1]">_snputc</a> from printf8.o(i._snputc) referenced from printf8.o(i.__0snprintf$8)
 <LI><a href="#[a0]">fputc</a> from at32_board.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[90]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[d0]">passwordmodify</a> from dwin_com_pro.o(i.passwordmodify) referenced 2 times from dwin_com_pro.o(.constdata)
 <LI><a href="#[ce]">timeSert</a> from dwin_com_pro.o(i.timeSert) referenced 2 times from dwin_com_pro.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[92]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415cbt7.o(.text)
</UL>
<P><STRONG><a name="[2f4]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[d5]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[f3]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2f5]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[2f6]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[2f7]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[2f8]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[2f9]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[2fa]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[50]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_at32f415cbt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415cbt7.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_at32f415cbt7.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415cbt7.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>ACC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415cbt7.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415cbt7.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415cbt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415cbt7.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415cbt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415cbt7.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415cbt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415cbt7.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415cbt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415cbt7.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415cbt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415cbt7.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>COMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415cbt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415cbt7.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>COMP2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415cbt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415cbt7.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415cbt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415cbt7.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415cbt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415cbt7.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415cbt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415cbt7.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415cbt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415cbt7.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415cbt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415cbt7.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415cbt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415cbt7.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415cbt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415cbt7.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415cbt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415cbt7.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415cbt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415cbt7.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415cbt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415cbt7.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415cbt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415cbt7.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>DMA2_Channel6_7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415cbt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415cbt7.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>ERTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415cbt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415cbt7.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>ERTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415cbt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415cbt7.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415cbt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415cbt7.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415cbt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415cbt7.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415cbt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415cbt7.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415cbt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415cbt7.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415cbt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415cbt7.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415cbt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415cbt7.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415cbt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415cbt7.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415cbt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415cbt7.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415cbt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415cbt7.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415cbt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415cbt7.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415cbt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415cbt7.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415cbt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415cbt7.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415cbt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415cbt7.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415cbt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415cbt7.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415cbt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415cbt7.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415cbt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415cbt7.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415cbt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415cbt7.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415cbt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415cbt7.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>TMR1_BRK_TMR9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415cbt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415cbt7.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>TMR1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415cbt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415cbt7.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>TMR1_OV_TMR10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415cbt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415cbt7.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>TMR1_TRG_COM_TMR11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415cbt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415cbt7.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>TMR2_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415cbt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415cbt7.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>TMR5_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415cbt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415cbt7.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>USBOTG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415cbt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415cbt7.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415cbt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415cbt7.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f415cbt7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415cbt7.o(RESET)
</UL>
<P><STRONG><a name="[2fb]"></a>CPU_IntDis</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[2fc]"></a>CPU_IntEn</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[180]"></a>CPU_SR_Save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatTaskCPUUsageInit
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IdleTask
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickTask
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateTimeout
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateDly
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSuspend
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSemPost
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskResume
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatReset
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QPost
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexCreate
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_NameClr
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[182]"></a>CPU_SR_Restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatTaskCPUUsageInit
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IdleTask
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickTask
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateTimeout
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateDly
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSuspend
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSemPost
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskResume
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatReset
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QPost
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexCreate
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_NameClr
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[2fd]"></a>CPU_WaitForInt</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[2fe]"></a>CPU_WaitForExcept</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[251]"></a>CPU_CntLeadZeros</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioGetHighest
</UL>

<P><STRONG><a name="[2ff]"></a>CPU_CntTrailZeros</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[300]"></a>CPU_RevBits</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[d7]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR3_GLOBAL_IRQHandler
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[fe]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskdlt645
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_send_msg
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_recv_msg
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_info_update
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_ReadData_Ack
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ReRecv1Cmd_Ack
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ReRecv0Cmd_Ack
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HY_RestUpdataData
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendResetAck
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYFreamSend
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendRegister
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendHear
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_RecvUpdata
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_RecvStartCharge
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_RecvReset
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_RecvRegisterAck
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_RecvRecordAck
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_RecvRateSet
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_RecvCardStart
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendQueryRateAck
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreHYBill
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendUpdataAck
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendStopAck
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendStartAck
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendDevStateA
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendCardInfo
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendBill
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_RecvFrameDispose
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetHYBatchNum
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_ShowCopy
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPTransactionrecord
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_CardMCUID
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_show_state
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_show_record
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispShow_Recode
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_Showstop_reason
</UL>

<P><STRONG><a name="[107]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_recv_msg
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_Transactionrecord
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_show_state
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_show_record
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispShow_Recode
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SelectUpNChargeRecode
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SelectNextNChargeRecode
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SelectCurChargeRecode
</UL>

<P><STRONG><a name="[301]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[db]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_RecvRateSet
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[302]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[303]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[da]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskDwin
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_Mesetelectricity
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_RecvUpdata
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM7600Reset
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendDevStateA
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendCardInfo
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_para_init
</UL>

<P><STRONG><a name="[f6]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskdlt645
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskDwin
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCard
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask4GSend
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask4GRecv
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_wait_msg
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_from_ctl_msg
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_start_func
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ch_ctl_msg
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleSIM7600_SendData
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_RecvRateSet
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZF_SendBill
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CIPRXGET
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendCardInfo
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_Transactionrecord
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPTransactionrecord
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_lock_state
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZF_SendDevState
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_ShowTime
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_SYSShowTime
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_show_state
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_show_record
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispShow_Recode
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu27_ShowSysInfo
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ClearRecodeInfo
</UL>

<P><STRONG><a name="[304]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[dc]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[27b]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_ReadData_Ack
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_HttpStart_Ack
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_HttpConect_Ack
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_SendAck1Cmd_Ack
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_SendAck0Cmd_Ack
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ReRecv1Cmd_Ack
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ReRecv0Cmd_Ack
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ConnectServer1_Ack
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ConnectServer1Cmd_Ack
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ConnectServer0_Ack
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ConnectServer0Cmd_Ack
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_CSQ_Ack
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_CIMI_Ack
</UL>

<P><STRONG><a name="[1f8]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_READ
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_HTTPPAR
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CIPCLOSE
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_ReadData_Ack
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_ConnectServer
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleSIM7600_SendData
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CIPRXGET
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM7600_RecvDesposeCmd
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_show_state
</UL>

<P><STRONG><a name="[146]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCard
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM7600_RecvDesposeCmd
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_change_card
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startchargUnlock
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_change_card
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_settlement
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_show_state
</UL>

<P><STRONG><a name="[27c]"></a>strtok</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, strtok.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strtok
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_HttpGet_Ack
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ReRecv1Cmd_Ack
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ReRecv0Cmd_Ack
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ConnectServer1_Ack
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ConnectServer1Cmd_Ack
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ConnectServer0_Ack
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ConnectServer0Cmd_Ack
</UL>

<P><STRONG><a name="[dd]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_ReadData_Ack
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_HttpGet_Ack
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ReRecv1Cmd_Ack
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ReRecv0Cmd_Ack
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ConnectServer1_Ack
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ConnectServer1Cmd_Ack
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ConnectServer0_Ack
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ConnectServer0Cmd_Ack
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_CSQ_Ack
</UL>

<P><STRONG><a name="[e0]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HLW8112_EA
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>

<P><STRONG><a name="[e3]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[e4]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[1be]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HLW8112_U
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HLW8112_PA_I
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HLW8112_EA
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112DataDispose
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_start_func
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_info_update
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendDevStateA
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendBill
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_show
</UL>

<P><STRONG><a name="[e5]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskdlt645
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HLW8112_U
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HLW8112_PA_I
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HLW8112_EA
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZF_SendDevState
</UL>

<P><STRONG><a name="[e6]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_get_cp_volt
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>

<P><STRONG><a name="[ea]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[eb]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[ec]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_get_cp_volt
</UL>

<P><STRONG><a name="[ed]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HLW8112_U
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HLW8112_PA_I
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HLW8112_EA
</UL>

<P><STRONG><a name="[ee]"></a>__aeabi_ul2f</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ffltul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_ul2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskdlt645
</UL>

<P><STRONG><a name="[ef]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_get_cp_volt
</UL>

<P><STRONG><a name="[1bf]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112DataDispose
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_start_func
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_info_update
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendDevStateA
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendBill
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZF_SendDevState
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_show
</UL>

<P><STRONG><a name="[f0]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_get_cp_volt
</UL>

<P><STRONG><a name="[1c0]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_cycle_get_8112
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_Dispose
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;electricity_err
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_under_volt
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_over_volt
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_over_current
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_low_current_9V
</UL>

<P><STRONG><a name="[305]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[2cd]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_cycle_get_8112
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_over_volt
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_over_current
</UL>

<P><STRONG><a name="[1c1]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_cycle_get_8112
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_Dispose
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;electricity_err
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_under_volt
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_low_current_9V
</UL>

<P><STRONG><a name="[1c2]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_Dispose
</UL>

<P><STRONG><a name="[306]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text), UNUSED)

<P><STRONG><a name="[27a]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HLW8112_EA
</UL>

<P><STRONG><a name="[d9]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[307]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[d8]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[308]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[e7]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[309]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[30a]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[e2]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[e1]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2f
</UL>

<P><STRONG><a name="[e9]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[e8]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[d6]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[30b]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[f1]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[f2]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[f4]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[30c]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[30d]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[22f]"></a>OSStartHighRdy</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(CODE))
<BR><BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
</UL>

<P><STRONG><a name="[22b]"></a>OSCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(CODE))
<BR><BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>

<P><STRONG><a name="[219]"></a>OSIntCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(CODE))
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[58]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(CODE))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415cbt7.o(RESET)
</UL>
<P><STRONG><a name="[2b7]"></a>ADC_Ctrl</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, at32f4xx_adc.o(i.ADC_Ctrl))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[2b6]"></a>ADC_DMACtrl</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, at32f4xx_adc.o(i.ADC_DMACtrl))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[2bb]"></a>ADC_GetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, at32f4xx_adc.o(i.ADC_GetCalibrationStatus))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[2b9]"></a>ADC_GetResetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, at32f4xx_adc.o(i.ADC_GetResetCalibrationStatus))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[2b4]"></a>ADC_Init</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, at32f4xx_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[2b5]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 184 bytes, Stack size 20 bytes, at32f4xx_adc.o(i.ADC_RegularChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[2b8]"></a>ADC_RstCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f4xx_adc.o(i.ADC_RstCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[2bc]"></a>ADC_SoftwareStartConvCtrl</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, at32f4xx_adc.o(i.ADC_SoftwareStartConvCtrl))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[2ba]"></a>ADC_StartCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f4xx_adc.o(i.ADC_StartCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[2b3]"></a>ADC_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32f4xx_adc.o(i.ADC_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[f5]"></a>APPTransactionrecord</STRONG> (Thumb, 562 bytes, Stack size 96 bytes, dwin_com_pro.o(i.APPTransactionrecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = APPTransactionrecord &rArr; Recordqueryinfo_WR &rArr; fal_partition_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4G_GetStartType
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetBatchNum
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recordqueryinfo_WR
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_ShowCopy
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToHex
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_Showstop_reason
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskDwin
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode5
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_change_card
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period_WriterFmBill
</UL>

<P><STRONG><a name="[100]"></a>APP_ClearRecodeInfo</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, dwin_com_pro.o(i.APP_ClearRecodeInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = APP_ClearRecodeInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent1
</UL>

<P><STRONG><a name="[101]"></a>APP_DisplayRecvDataAnalyze</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, dwin_com_pro.o(i.APP_DisplayRecvDataAnalyze))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = APP_DisplayRecvDataAnalyze &rArr; DealWithVari
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurMenu
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealWithVari
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealWithKey
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskDwin
</UL>

<P><STRONG><a name="[118]"></a>APP_GetAppRegisterState</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, modulea7680c.o(i.APP_GetAppRegisterState))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCard
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask4GSend
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask4GMain
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendRegister
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendHear
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZF_SendStartCharge
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZF_SendBill
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendDevStateA
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendCardInfo
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZF_SendRegister
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZF_SendHear
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZF_SendDevState
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispShow_NetState
</UL>

<P><STRONG><a name="[f8]"></a>APP_GetBatchNum</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, 4gmain.o(i.APP_GetBatchNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = APP_GetBatchNum &rArr; APP_GetHYBatchNum
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetHYBatchNum
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPTransactionrecord
</UL>

<P><STRONG><a name="[10e]"></a>APP_GetBillInfo</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, dwin_com_pro.o(i.APP_GetBillInfo))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask4GSend
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HY_RestUpdataData
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SetHYResetStartType
</UL>

<P><STRONG><a name="[193]"></a>APP_GetCSQNum</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, modulea7680c.o(i.APP_GetCSQNum))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispShow_NetState
</UL>

<P><STRONG><a name="[105]"></a>APP_GetHYBatchNum</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hyframe.o(i.APP_GetHYBatchNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = APP_GetHYBatchNum
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetBatchNum
</UL>

<P><STRONG><a name="[2a8]"></a>APP_GetHYStartType</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hyframe.o(i.APP_GetHYStartType))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4G_GetStartType
</UL>

<P><STRONG><a name="[11a]"></a>APP_GetModuleConnectState</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, modulea7680c.o(i.APP_GetModuleConnectState))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask4GSend
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask4GRecv
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask4GMain
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Connect_4G
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dwin_state_dispose
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispShow_NetState
</UL>

<P><STRONG><a name="[13f]"></a>APP_GetResendBillState</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, 4gmain.o(i.APP_GetResendBillState))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask4GSend
</UL>

<P><STRONG><a name="[116]"></a>APP_GetSIM7600Mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, modulea7680c.o(i.APP_GetSIM7600Mode))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskDwin
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCharge
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCard
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask4GSend
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask4GRecv
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask4GMain
</UL>

<P><STRONG><a name="[128]"></a>APP_GetSIM7600Status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, modulea7680c.o(i.APP_GetSIM7600Status))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask4GSend
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Connect_4G
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dwin_state_dispose
</UL>

<P><STRONG><a name="[1fb]"></a>APP_RecvDataControl</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, 4grecv.o(i.APP_RecvDataControl))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_ReadData_Ack
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_HttpGet_Ack
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ReRecv1Cmd_Ack
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ReRecv0Cmd_Ack
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_HTTPDownload
</UL>

<P><STRONG><a name="[106]"></a>APP_SelectCurChargeRecode</STRONG> (Thumb, 248 bytes, Stack size 8 bytes, dwin_com_pro.o(i.APP_SelectCurChargeRecode))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = APP_SelectCurChargeRecode &rArr; Recordqueryinfo_WR &rArr; fal_partition_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recordqueryinfo_WR
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispShow_Recode
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNum16uVariable
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent1
</UL>

<P><STRONG><a name="[10b]"></a>APP_SelectNextNChargeRecode</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, dwin_com_pro.o(i.APP_SelectNextNChargeRecode))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = APP_SelectNextNChargeRecode &rArr; Recordqueryinfo_WR &rArr; fal_partition_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recordqueryinfo_WR
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispShow_Recode
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNum16uVariable
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent30
</UL>

<P><STRONG><a name="[10c]"></a>APP_SelectUpNChargeRecode</STRONG> (Thumb, 282 bytes, Stack size 16 bytes, dwin_com_pro.o(i.APP_SelectUpNChargeRecode))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = APP_SelectUpNChargeRecode &rArr; Recordqueryinfo_WR &rArr; fal_partition_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recordqueryinfo_WR
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispShow_Recode
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNum16uVariable
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent31
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent30
</UL>

<P><STRONG><a name="[125]"></a>APP_SetAppRegisterState</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, modulea7680c.o(i.APP_SetAppRegisterState))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask4GRecv
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_RecvRegisterAck
</UL>

<P><STRONG><a name="[10d]"></a>APP_SetHYResetStartType</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hyframe.o(i.APP_SetHYResetStartType))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = APP_SetHYResetStartType
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetBillInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SetResetStartType
</UL>

<P><STRONG><a name="[2a9]"></a>APP_SetHYStartType</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hyframe.o(i.APP_SetHYStartType))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4G_SetStartType
</UL>

<P><STRONG><a name="[127]"></a>APP_SetNetNotConect</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, modulea7680c.o(i.APP_SetNetNotConect))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask4GRecv
</UL>

<P><STRONG><a name="[12d]"></a>APP_SetResendBillState</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, 4gmain.o(i.APP_SetResendBillState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = APP_SetResendBillState
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskDwin
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask4GSend
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFmBill
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rest_charge_dispose
</UL>

<P><STRONG><a name="[10f]"></a>APP_SetResetStartType</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, 4gmain.o(i.APP_SetResetStartType))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = APP_SetResetStartType &rArr; APP_SetHYResetStartType
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SetHYResetStartType
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rest_charge_dispose
</UL>

<P><STRONG><a name="[11d]"></a>APP_SetSIM7600Mode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, modulea7680c.o(i.APP_SetSIM7600Mode))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask4GMain
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_RecvHearAck
</UL>

<P><STRONG><a name="[1db]"></a>APP_SetStartNetState</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, 4gmain.o(i.APP_SetStartNetState))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_RecvStartCharge
</UL>

<P><STRONG><a name="[110]"></a>Ad_entry</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, dispkey.o(i.Ad_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = Ad_entry &rArr; OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent25
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent2
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent16
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent1
</UL>

<P><STRONG><a name="[97]"></a>AppTask4GMain</STRONG> (Thumb, 396 bytes, Stack size 16 bytes, 4gmain.o(i.AppTask4GMain))
<BR><BR>[Stack]<UL><LI>Max Depth = 564 + Unknown Stack Size
<LI>Call Chain = AppTask4GMain &rArr; HY_SendUpdataAck &rArr; HYFreamSend &rArr; ModuleSIM7600_SendData &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JumpToProgramCode
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexCreate
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemReset
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Connect_4G
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetSIM7600Mode
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CIPMODE
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_HTTPDownload
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendUpdataAck
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SetSIM7600Mode
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetModuleConnectState
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetAppRegisterState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.AppTaskCreate)
</UL>
<P><STRONG><a name="[98]"></a>AppTask4GRecv</STRONG> (Thumb, 634 bytes, Stack size 48 bytes, 4grecv.o(i.AppTask4GRecv))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = AppTask4GRecv &rArr; mq_service_send_to_4gsend &rArr; mq_service_send_msg &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART14Ginit
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_send_to_4gsend
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_recv_msg
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetSIM7600Mode
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM7600_RecvDesposeCmd
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SetNetNotConect
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SetAppRegisterState
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetModuleConnectState
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4G_RecvFrameDispose
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.AppTaskCreate)
</UL>
<P><STRONG><a name="[99]"></a>AppTask4GSend</STRONG> (Thumb, 722 bytes, Stack size 48 bytes, 4gsend.o(i.AppTask4GSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 804 + Unknown Stack Size
<LI>Call Chain = AppTask4GSend &rArr; _4G_SendCardInfo &rArr; HY_SendCardInfo &rArr; HYFreamSend &rArr; ModuleSIM7600_SendData &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_recv_msg
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetSIM7600Mode
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZF_SendStartCharge
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZF_SendFrameDispose
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZF_SendBill
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriterFmBill
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CSQ
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CIPRXGET
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendQueryRateAck
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetBillInfo
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetSIM7600Status
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetModuleConnectState
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetAppRegisterState
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4G_SetStartType
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4G_SendVinInfo
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4G_SendStopAck
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4G_SendStartAck
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4G_SendSetTimeAck
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4G_SendRateMode
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4G_SendRateAck
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4G_SendQueryRate
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4G_SendFrameDispose
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4G_SendDevState
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4G_SendCardVinCharge
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4G_SendCardInfo
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4G_SendBill
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReSendBill
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SetResendBillState
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetResendBillState
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.AppTaskCreate)
</UL>
<P><STRONG><a name="[94]"></a>AppTaskCard</STRONG> (Thumb, 444 bytes, Stack size 32 bytes, read_nuid.o(i.AppTaskCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = AppTaskCard &rArr; start_change_card &rArr; startchargUnlock &rArr; read_card_money &rArr; RC522_ReadCard &rArr; RC522_PcdAuthState &rArr; RC522_PcdComMF522 &rArr; RC522_SetBitMask &rArr; RC522_WriteRawRC &rArr; RC522_ReadWriteByte &rArr; delay_u &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_send_to_4gsend
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_card_send_disp
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetSIM7600Mode
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4G_GetStartType
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ch_ctl_msg
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetAppRegisterState
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_PcdReset
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_M500PcdConfigISOType
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_Init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurMenu
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_change_card
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_change_card
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slotcard_state
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_read_nuid
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.AppTaskCreate)
</UL>
<P><STRONG><a name="[95]"></a>AppTaskCharge</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, chtask.o(i.AppTaskCharge))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = AppTaskCharge &rArr; ch_wait_msg &rArr; ch_msg_proc &rArr; ch_task_tcu_msg_proc &rArr; ch_from_ctl_msg &rArr; mq_service_ch_send_dip &rArr; mq_service_send_msg &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_flag
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetSIM7600Mode
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_task_init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_task_cycle_proc
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_get_cp_state_info
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_input_period
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_wait_msg
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_Dispose
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cp_pwm_full
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_loop_proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.AppTaskCreate)
</UL>
<P><STRONG><a name="[96]"></a>AppTaskDwin</STRONG> (Thumb, 788 bytes, Stack size 48 bytes, dwin_com_pro.o(i.AppTaskDwin))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = AppTaskDwin &rArr; dwin_show &rArr; Disp_ShowRTC &rArr; Dis_ShowTime &rArr; PrintStr &rArr; LCD_SendToUart &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2Dispinit
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_send_to_4gsend
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_recv_msg
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetSIM7600Mode
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFmBill
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HY_RestUpdataData
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriterFmBill
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SetResendBillState
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreRecodeCurNum
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurMenu
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPTransactionrecord
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_Notcalculated
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dwin_state_dispose
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dwin_period_entry
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rest_charge_dispose
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_reset_curcharge
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_DisplayRecvDataAnalyze
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_para_init
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_show_state
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_show
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealWithKey
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.AppTaskCreate)
</UL>
<P><STRONG><a name="[9a]"></a>AppTaskdlt645</STRONG> (Thumb, 1242 bytes, Stack size 48 bytes, dlt645_port.o(i.AppTaskdlt645))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = AppTaskdlt645 &rArr; mq_service_recv_msg &rArr; OSQPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_recv_msg
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2f
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_485send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.AppTaskCreate)
</UL>
<P><STRONG><a name="[178]"></a>Auto_charging</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, dwin_com_pro.o(i.Auto_charging))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = Auto_charging &rArr; DisplayCommonMenu &rArr; PrintBackImage &rArr; PraPerprintBackImage &rArr; LCD_SendToUart &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent16
</UL>

<P><STRONG><a name="[1d7]"></a>BCDtoHEX</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, dwinprotocol.o(i.BCDtoHEX))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_RecvRegisterAck
</UL>

<P><STRONG><a name="[168]"></a>BSP_CPU_ClkFreq</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, bsp.o(i.BSP_CPU_ClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = BSP_CPU_ClkFreq &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrInit
</UL>

<P><STRONG><a name="[166]"></a>BSP_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp.o(i.BSP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[17b]"></a>BubbleSort</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, cp.o(i.BubbleSort))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BubbleSort
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Swap
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_get_cp_volt
</UL>

<P><STRONG><a name="[54]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32f4xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415cbt7.o(RESET)
</UL>
<P><STRONG><a name="[167]"></a>CPU_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cpu_core.o(i.CPU_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = CPU_Init &rArr; CPU_TS_Init &rArr; CPU_TS_TmrInit &rArr; BSP_CPU_ClkFreq &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_Init
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_NameInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[17f]"></a>CPU_NameClr</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, cpu_core.o(i.CPU_NameClr))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = CPU_NameClr &rArr; Mem_Clr &rArr; Mem_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Clr
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_NameInit
</UL>

<P><STRONG><a name="[184]"></a>CPU_TS_TmrFreqSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu_core.o(i.CPU_TS_TmrFreqSet))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrInit
</UL>

<P><STRONG><a name="[183]"></a>CPU_TS_TmrInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bsp.o(i.CPU_TS_TmrInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = CPU_TS_TmrInit &rArr; BSP_CPU_ClkFreq &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CPU_ClkFreq
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrFreqSet
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_Init
</UL>

<P><STRONG><a name="[222]"></a>CPU_TS_TmrRd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp.o(i.CPU_TS_TmrRd))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSwHook
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedLockTimeMeasStop
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedLockTimeMeasStart
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrTask
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateTimeout
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateDly
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskInitTCB
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPost
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatReset
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
</UL>

<P><STRONG><a name="[28b]"></a>Char2Hex</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, hyframe.o(i.Char2Hex))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String2Hex
</UL>

<P><STRONG><a name="[153]"></a>Clear_flag</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, read_nuid.o(i.Clear_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = Clear_flag &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_cp_off
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCharge
</UL>

<P><STRONG><a name="[186]"></a>Clear_record</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dwin_com_pro.o(i.Clear_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Clear_record &rArr; fal_partition_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_para_init
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent14
</UL>

<P><STRONG><a name="[2f1]"></a>DATAHEXtoBCD</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ertc.o(i.DATAHEXtoBCD))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
</UL>

<P><STRONG><a name="[2b2]"></a>DMA_ChannelEnable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, at32f4xx_dma.o(i.DMA_ChannelEnable))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[2b0]"></a>DMA_DefaultInitParaConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, at32f4xx_dma.o(i.DMA_DefaultInitParaConfig))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[2b1]"></a>DMA_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, at32f4xx_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[2af]"></a>DMA_Reset</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, at32f4xx_dma.o(i.DMA_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[103]"></a>DealWithKey</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dispkey.o(i.DealWithKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DealWithKey
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurMenu
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskDwin
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_DisplayRecvDataAnalyze
</UL>

<P><STRONG><a name="[57]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415cbt7.o(RESET)
</UL>
<P><STRONG><a name="[1b9]"></a>DelayMS</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, spi_flash.o(i.DelayMS))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Init
</UL>

<P><STRONG><a name="[18c]"></a>Dis_SYSShowTime</STRONG> (Thumb, 98 bytes, Stack size 168 bytes, dwin_com_pro.o(i.Dis_SYSShowTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = Dis_SYSShowTime &rArr; PrintStr &rArr; LCD_SendToUart &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurMenu
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Showsettime
</UL>

<P><STRONG><a name="[f7]"></a>Dis_ShowCopy</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, dispshowstatus.o(i.Dis_ShowCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Dis_ShowCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurMenu
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_settlementrecord
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_Transactionrecord
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPTransactionrecord
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startchargUnlock
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_settlement
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_show_record
</UL>

<P><STRONG><a name="[18e]"></a>Dis_ShowStatus</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, dispshowstatus.o(i.Dis_ShowStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = Dis_ShowStatus &rArr; PrintStr &rArr; LCD_SendToUart &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurMenu
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_ShowSysInfo
</UL>

<P><STRONG><a name="[18f]"></a>Dis_ShowTime</STRONG> (Thumb, 110 bytes, Stack size 168 bytes, dwin_com_pro.o(i.Dis_ShowTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = Dis_ShowTime &rArr; PrintStr &rArr; LCD_SendToUart &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurMenu
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVariColor
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_ShowRTC
</UL>

<P><STRONG><a name="[fa]"></a>Dis_Showstop_reason</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, dispshowstatus.o(i.Dis_Showstop_reason))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Dis_Showstop_reason
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurMenu
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPTransactionrecord
</UL>

<P><STRONG><a name="[195]"></a>Disp_Showsettime</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dwin_com_pro.o(i.Disp_Showsettime))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = Disp_Showsettime &rArr; Dis_SYSShowTime &rArr; PrintStr &rArr; LCD_SendToUart &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_SYSShowTime
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu12_CodeDispose
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent13
</UL>

<P><STRONG><a name="[108]"></a>DisplayCommonMenu</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, dispkeyfunction.o(i.DisplayCommonMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = DisplayCommonMenu &rArr; PrintBackImage &rArr; PraPerprintBackImage &rArr; LCD_SendToUart &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintBackImage
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskDwin
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_change_card
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slotcard_state
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_settlement
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dwin_state_dispose
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timing_charging
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_charging
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu12_CodeDispose
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Electric_charing
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Amount_charging
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu27_ShowSysInfo
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_charging
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SelectUpNChargeRecode
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SelectNextNChargeRecode
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SelectCurChargeRecode
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent9
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent8
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent7
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent6
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent5
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent3
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent25
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent24
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent23
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent21
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent20
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent2
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent19
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent18
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent17
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent16
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent15
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent14
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent13
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent11
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent10
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent1
</UL>

<P><STRONG><a name="[197]"></a>DisplayQRCode</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, dwinprotocol.o(i.DisplayQRCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = DisplayQRCode &rArr; LCD_SendToUart &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendTwoBytes
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendToUart
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendByteToBuf
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwin_FrameHead
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_show_state
</UL>

<P><STRONG><a name="[19c]"></a>ERTC_Config</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, ertc.o(i.ERTC_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ERTC_Config &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSEConfig
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ERTCCLKConfig
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ERTCCLKCmd
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_BackupResetCmd
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERTC_WaitForSynchro
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERTC_Init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCtrl
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ertc
</UL>

<P><STRONG><a name="[1a9]"></a>ERTC_EnterInitMode</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, at32f4xx_ertc.o(i.ERTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ERTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERTC_SetTimeValue
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERTC_SetDateValue
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERTC_Init
</UL>

<P><STRONG><a name="[1aa]"></a>ERTC_ExitInitMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at32f4xx_ertc.o(i.ERTC_ExitInitMode))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERTC_SetTimeValue
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERTC_SetDateValue
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERTC_Init
</UL>

<P><STRONG><a name="[1a6]"></a>ERTC_GetDateValue</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, at32f4xx_ertc.o(i.ERTC_GetDateValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ERTC_GetDateValue
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERTC_TimeShow
</UL>

<P><STRONG><a name="[1a8]"></a>ERTC_GetTimeValue</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, at32f4xx_ertc.o(i.ERTC_GetTimeValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ERTC_GetTimeValue
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERTC_TimeShow
</UL>

<P><STRONG><a name="[1b3]"></a>ERTC_INTConfig</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, at32f4xx_ertc.o(i.ERTC_INTConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERTC_TimeStampConfig
</UL>

<P><STRONG><a name="[1a5]"></a>ERTC_Init</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, at32f4xx_ertc.o(i.ERTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ERTC_Init &rArr; ERTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERTC_ExitInitMode
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERTC_Config
</UL>

<P><STRONG><a name="[2e6]"></a>ERTC_ReadBackupRegister</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, at32f4xx_ertc.o(i.ERTC_ReadBackupRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ERTC_ReadBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ertc
</UL>

<P><STRONG><a name="[1ab]"></a>ERTC_SetDateValue</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, at32f4xx_ertc.o(i.ERTC_SetDateValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ERTC_SetDateValue &rArr; ERTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERTC_WaitForSynchro
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERTC_ExitInitMode
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERTC_EnterInitMode
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERTC_ByteToBcd2
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERTC_TimeRegulate
</UL>

<P><STRONG><a name="[1ad]"></a>ERTC_SetTimeValue</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, at32f4xx_ertc.o(i.ERTC_SetTimeValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ERTC_SetTimeValue &rArr; ERTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERTC_WaitForSynchro
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERTC_ExitInitMode
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERTC_EnterInitMode
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERTC_ByteToBcd2
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERTC_TimeRegulate
</UL>

<P><STRONG><a name="[1ae]"></a>ERTC_TimeRegulate</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, ertc.o(i.ERTC_TimeRegulate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ERTC_TimeRegulate &rArr; ERTC_SetTimeValue &rArr; ERTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERTC_WriteBackupRegister
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERTC_SetTimeValue
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERTC_SetDateValue
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ertc
</UL>

<P><STRONG><a name="[175]"></a>ERTC_TimeShow</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ertc.o(i.ERTC_TimeShow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ERTC_TimeShow &rArr; ERTC_GetTimeValue
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERTC_GetTimeValue
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERTC_GetDateValue
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ertc
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[1b0]"></a>ERTC_TimeStampConfig</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ertc.o(i.ERTC_TimeStampConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ERTC_TimeStampConfig &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERTC_INTConfig
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ertc
</UL>

<P><STRONG><a name="[1a4]"></a>ERTC_WaitForSynchro</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, at32f4xx_ertc.o(i.ERTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ERTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ertc
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERTC_SetTimeValue
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERTC_SetDateValue
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERTC_Config
</UL>

<P><STRONG><a name="[1af]"></a>ERTC_WriteBackupRegister</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, at32f4xx_ertc.o(i.ERTC_WriteBackupRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ERTC_WriteBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERTC_TimeRegulate
</UL>

<P><STRONG><a name="[1b2]"></a>EXTI_Init</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, at32f4xx_exti.o(i.EXTI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERTC_TimeStampConfig
</UL>

<P><STRONG><a name="[16c]"></a>FLASH_Init</STRONG> (Thumb, 322 bytes, Stack size 8 bytes, spi_flash.o(i.FLASH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FLASH_Init &rArr; SPI_FLASH_WriteStatus &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteStatus
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteDisable
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadID
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Detect
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMS
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[1ba]"></a>GPIO_Configuration</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, adc.o(i.GPIO_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[1bc]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, at32f4xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_Flash_Io_Init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_Io_Init
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_HLW8112
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_PWM_Conrtol
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2Dispinit
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART14Ginit
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_GPIOInit
</UL>

<P><STRONG><a name="[1f2]"></a>GPIO_PinsRemapConfig</STRONG> (Thumb, 1002 bytes, Stack size 20 bytes, at32f4xx_gpio.o(i.GPIO_PinsRemapConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinsRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_Io_Init
</UL>

<P><STRONG><a name="[275]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32f4xx_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_input_period
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadByte
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_ReadWriteByte
</UL>

<P><STRONG><a name="[115]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32f4xx_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_Io_Init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCard
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask4GMain
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3init
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3SENDBUF
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_ctl_disable
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM7600Reset
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteStatus
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteDisable
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SectorErase
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadID
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadByte
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PageWrite
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferRead
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_WriteRawRC
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_ReadWriteByte
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_ReadRawRC
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_GPIOInit
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_PcdReset
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startchargUnlock
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_change_card
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slotcard_state
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dwin_state_dispose
</UL>

<P><STRONG><a name="[114]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32f4xx_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_Flash_Io_Init
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_HLW8112
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCard
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask4GMain
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3SENDBUF
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_ctl_enable
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM7600Reset
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteStatus
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteDisable
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SectorErase
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadID
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadByte
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PageWrite
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferRead
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_WriteRawRC
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_ReadWriteByte
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_ReadRawRC
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_GPIOInit
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_PcdReset
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startchargUnlock
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_change_card
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slotcard_state
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dwin_state_dispose
</UL>

<P><STRONG><a name="[1bb]"></a>GPIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, at32f4xx_gpio.o(i.GPIO_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
</UL>

<P><STRONG><a name="[102]"></a>GetCurMenu</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dispkeyfunction.o(i.GetCurMenu))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskDwin
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCard
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_ShowCopy
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_change_card
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slotcard_state
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dwin_state_dispose
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_ShowTime
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_SYSShowTime
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_DisplayRecvDataAnalyze
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_show
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_Showstop_reason
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_ShowStatus
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu27_ShowSysInfo
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealWithKey
</UL>

<P><STRONG><a name="[1dd]"></a>HEXtoBCD</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, dwinprotocol.o(i.HEXtoBCD))
<BR><BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreHYBill
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendBill
</UL>

<P><STRONG><a name="[1bd]"></a>HLW8112DataDispose</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, chtask.o(i.HLW8112DataDispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HLW8112DataDispose &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_cycle_get_8112
</UL>

<P><STRONG><a name="[1c3]"></a>HLW8112_Measure</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, hlw8112-spi.o(i.HLW8112_Measure))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = HLW8112_Measure &rArr; Init_HLW8112 &rArr; Judge_CheckSum_HLW8112_Calfactor &rArr; Read_HLW8112_RegData &rArr; HLW8112_SPI_ReadReg &rArr; HLW8112_SPI_WriteByte &rArr; delay_u &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_HLW8112
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HLW8112_U
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HLW8112_RegData
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HLW8112_PA_I
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HLW8112_EA
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_cycle_get_8112
</UL>

<P><STRONG><a name="[1c8]"></a>HLW8112_SPI_ReadByte</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, hlw8112-spi.o(i.HLW8112_SPI_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = HLW8112_SPI_ReadByte &rArr; delay_u &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_u
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HLW8112_RegData
</UL>

<P><STRONG><a name="[1ca]"></a>HLW8112_SPI_ReadReg</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hlw8112-spi.o(i.HLW8112_SPI_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = HLW8112_SPI_ReadReg &rArr; HLW8112_SPI_WriteByte &rArr; delay_u &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_SPI_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HLW8112_RegData
</UL>

<P><STRONG><a name="[1cb]"></a>HLW8112_SPI_WriteByte</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, hlw8112-spi.o(i.HLW8112_SPI_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = HLW8112_SPI_WriteByte &rArr; delay_u &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_u
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_HLW8112
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_underVoltage
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_V_Zero
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HLW8112_EA
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_WriteREG_EN
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_WriteREG_DIS
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_SPI_WriteReg
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_SPI_ReadReg
</UL>

<P><STRONG><a name="[1cc]"></a>HLW8112_SPI_WriteReg</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, hlw8112-spi.o(i.HLW8112_SPI_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = HLW8112_SPI_WriteReg &rArr; HLW8112_SPI_WriteByte &rArr; delay_u &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_SPI_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_HLW8112
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_underVoltage
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_V_Zero
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HLW8112_EA
</UL>

<P><STRONG><a name="[1cd]"></a>HLW8112_WriteREG_DIS</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, hlw8112-spi.o(i.HLW8112_WriteREG_DIS))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = HLW8112_WriteREG_DIS &rArr; HLW8112_SPI_WriteByte &rArr; delay_u &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_SPI_WriteByte
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_u
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_HLW8112
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_underVoltage
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_V_Zero
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HLW8112_EA
</UL>

<P><STRONG><a name="[1ce]"></a>HLW8112_WriteREG_EN</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, hlw8112-spi.o(i.HLW8112_WriteREG_EN))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = HLW8112_WriteREG_EN &rArr; HLW8112_SPI_WriteByte &rArr; delay_u &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_SPI_WriteByte
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_u
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_HLW8112
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_underVoltage
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_V_Zero
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HLW8112_EA
</UL>

<P><STRONG><a name="[9]"></a>HYDisplayMenu1</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu1))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>HYDisplayMenu10</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu10))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>HYDisplayMenu11</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu11))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>HYDisplayMenu12</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu12))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[21]"></a>HYDisplayMenu13</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu13))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[23]"></a>HYDisplayMenu14</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu14))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[25]"></a>HYDisplayMenu15</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu15))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[27]"></a>HYDisplayMenu16</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu16))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[29]"></a>HYDisplayMenu17</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu17))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[2b]"></a>HYDisplayMenu18</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu18))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[2d]"></a>HYDisplayMenu19</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu19))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[b]"></a>HYDisplayMenu2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu2))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[2f]"></a>HYDisplayMenu20</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu20))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[31]"></a>HYDisplayMenu21</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu21))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[33]"></a>HYDisplayMenu22</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu22))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[35]"></a>HYDisplayMenu23</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu23))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[37]"></a>HYDisplayMenu24</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu24))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[7]"></a>HYDisplayMenu25</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu25))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[39]"></a>HYDisplayMenu26</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu26))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[3b]"></a>HYDisplayMenu27</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu27))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[3d]"></a>HYDisplayMenu28</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu28))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[d]"></a>HYDisplayMenu3</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu3))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[3f]"></a>HYDisplayMenu30</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu30))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[41]"></a>HYDisplayMenu31</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu31))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[43]"></a>HYDisplayMenu32</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu32))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[45]"></a>HYDisplayMenu33</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu33))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[47]"></a>HYDisplayMenu34</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu34))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[49]"></a>HYDisplayMenu35</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu35))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[4b]"></a>HYDisplayMenu36</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu36))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[4d]"></a>HYDisplayMenu37</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu37))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[4f]"></a>HYDisplayMenu38</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu38))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[f]"></a>HYDisplayMenu4</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu4))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[11]"></a>HYDisplayMenu5</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu5))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[13]"></a>HYDisplayMenu6</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu6))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[15]"></a>HYDisplayMenu7</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu7))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[17]"></a>HYDisplayMenu8</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu8))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[19]"></a>HYDisplayMenu9</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu9))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[1cf]"></a>HYFreamSend</STRONG> (Thumb, 184 bytes, Stack size 328 bytes, hyframe.o(i.HYFreamSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 532 + Unknown Stack Size
<LI>Call Chain = HYFreamSend &rArr; ModuleSIM7600_SendData &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleSIM7600_SendData
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_crc_Data
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendResetAck
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendRegister
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendHear
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendQueryRateAck
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendUpdataAck
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendStopAck
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendStartAck
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendRateAck
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendDevStateA
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendCardInfo
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendBillData
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendBill
</UL>

<P><STRONG><a name="[8]"></a>HYKeyEvent1</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent1))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent1 &rArr; Munu27_ShowSysInfo &rArr; DisplayCommonMenu &rArr; PrintBackImage &rArr; PraPerprintBackImage &rArr; LCD_SendToUart &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simulation_Print
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu27_ShowSysInfo
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SelectCurChargeRecode
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ClearRecodeInfo
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ad_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>HYKeyEvent10</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent10))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent10 &rArr; DisplayCommonMenu &rArr; PrintBackImage &rArr; PraPerprintBackImage &rArr; LCD_SendToUart &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>HYKeyEvent11</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent11))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent11 &rArr; DisplayCommonMenu &rArr; PrintBackImage &rArr; PraPerprintBackImage &rArr; LCD_SendToUart &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>HYKeyEvent12</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, dispkey.o(i.HYKeyEvent12))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[20]"></a>HYKeyEvent13</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent13))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent13 &rArr; Munu27_ShowSysInfo &rArr; DisplayCommonMenu &rArr; PrintBackImage &rArr; PraPerprintBackImage &rArr; LCD_SendToUart &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemReset
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu27_ShowSysInfo
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_ShowSysInfo
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Showsettime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[22]"></a>HYKeyEvent14</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent14))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent14 &rArr; Munu13_ShowSysInfo &rArr; Dis_ShowStatus &rArr; PrintStr &rArr; LCD_SendToUart &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemReset
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDwinVariable
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_ShowSysInfo
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_record
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[24]"></a>HYKeyEvent15</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent15))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent15 &rArr; DisplayCommonMenu &rArr; PrintBackImage &rArr; PraPerprintBackImage &rArr; LCD_SendToUart &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[26]"></a>HYKeyEvent16</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent16))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent16 &rArr; Auto_charging &rArr; DisplayCommonMenu &rArr; PrintBackImage &rArr; PraPerprintBackImage &rArr; LCD_SendToUart &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simulation_Print
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_charging
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ad_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[28]"></a>HYKeyEvent17</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent17))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent17 &rArr; DisplayCommonMenu &rArr; PrintBackImage &rArr; PraPerprintBackImage &rArr; LCD_SendToUart &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDwinVariable
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNum16uVariable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>HYKeyEvent18</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent18))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent18 &rArr; DisplayCommonMenu &rArr; PrintBackImage &rArr; PraPerprintBackImage &rArr; LCD_SendToUart &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDwinVariable
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNum16uVariable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>HYKeyEvent19</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent19))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent19 &rArr; DisplayCommonMenu &rArr; PrintBackImage &rArr; PraPerprintBackImage &rArr; LCD_SendToUart &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDwinVariable
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNum16uVariable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[a]"></a>HYKeyEvent2</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent2 &rArr; DisplayCommonMenu &rArr; PrintBackImage &rArr; PraPerprintBackImage &rArr; LCD_SendToUart &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ad_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[2e]"></a>HYKeyEvent20</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent20))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent20 &rArr; DisplayCommonMenu &rArr; PrintBackImage &rArr; PraPerprintBackImage &rArr; LCD_SendToUart &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDwinVariable
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNum16uVariable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[30]"></a>HYKeyEvent21</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent21))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent21 &rArr; DisplayCommonMenu &rArr; PrintBackImage &rArr; PraPerprintBackImage &rArr; LCD_SendToUart &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[32]"></a>HYKeyEvent22</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent22))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent22 &rArr; ReadDwinVariable &rArr; LCD_SendToUart &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDwinVariable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[34]"></a>HYKeyEvent23</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent23))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent23 &rArr; DisplayCommonMenu &rArr; PrintBackImage &rArr; PraPerprintBackImage &rArr; LCD_SendToUart &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[36]"></a>HYKeyEvent24</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent24))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent24 &rArr; DisplayCommonMenu &rArr; PrintBackImage &rArr; PraPerprintBackImage &rArr; LCD_SendToUart &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[6]"></a>HYKeyEvent25</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent25))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent25 &rArr; DisplayCommonMenu &rArr; PrintBackImage &rArr; PraPerprintBackImage &rArr; LCD_SendToUart &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simulation_Print
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ad_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[38]"></a>HYKeyEvent26</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, dispkey.o(i.HYKeyEvent26))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[3a]"></a>HYKeyEvent27</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent27))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent27 &rArr; Munu27_ShowSysInfo &rArr; DisplayCommonMenu &rArr; PrintBackImage &rArr; PraPerprintBackImage &rArr; LCD_SendToUart &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu27_ShowSysInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[3c]"></a>HYKeyEvent28</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent28))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent28 &rArr; Munu27_ShowSysInfo &rArr; DisplayCommonMenu &rArr; PrintBackImage &rArr; PraPerprintBackImage &rArr; LCD_SendToUart &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu27_ShowSysInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[c]"></a>HYKeyEvent3</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent3))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent3 &rArr; DisplayCommonMenu &rArr; PrintBackImage &rArr; PraPerprintBackImage &rArr; LCD_SendToUart &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[3e]"></a>HYKeyEvent30</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent30))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent30 &rArr; APP_SelectUpNChargeRecode &rArr; Recordqueryinfo_WR &rArr; fal_partition_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SelectUpNChargeRecode
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SelectNextNChargeRecode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[40]"></a>HYKeyEvent31</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent31))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent31 &rArr; APP_SelectUpNChargeRecode &rArr; Recordqueryinfo_WR &rArr; fal_partition_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SelectUpNChargeRecode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[42]"></a>HYKeyEvent32</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, dispkey.o(i.HYKeyEvent32))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[44]"></a>HYKeyEvent33</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, dispkey.o(i.HYKeyEvent33))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[46]"></a>HYKeyEvent34</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, dispkey.o(i.HYKeyEvent34))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[48]"></a>HYKeyEvent35</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, dispkey.o(i.HYKeyEvent35))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[4a]"></a>HYKeyEvent36</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, dispkey.o(i.HYKeyEvent36))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[4c]"></a>HYKeyEvent37</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, dispkey.o(i.HYKeyEvent37))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[4e]"></a>HYKeyEvent38</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, dispkey.o(i.HYKeyEvent38))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[e]"></a>HYKeyEvent4</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkey.o(i.HYKeyEvent4))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[10]"></a>HYKeyEvent5</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent5))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent5 &rArr; DisplayCommonMenu &rArr; PrintBackImage &rArr; PraPerprintBackImage &rArr; LCD_SendToUart &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[12]"></a>HYKeyEvent6</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent6))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent6 &rArr; DisplayCommonMenu &rArr; PrintBackImage &rArr; PraPerprintBackImage &rArr; LCD_SendToUart &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[14]"></a>HYKeyEvent7</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent7))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent7 &rArr; DisplayCommonMenu &rArr; PrintBackImage &rArr; PraPerprintBackImage &rArr; LCD_SendToUart &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[16]"></a>HYKeyEvent8</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent8))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent8 &rArr; DisplayCommonMenu &rArr; PrintBackImage &rArr; PraPerprintBackImage &rArr; LCD_SendToUart &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[18]"></a>HYKeyEvent9</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent9))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent9 &rArr; DisplayCommonMenu &rArr; PrintBackImage &rArr; PraPerprintBackImage &rArr; LCD_SendToUart &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[1d5]"></a>HY_Mesetelectricity</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hyframe.o(i.HY_Mesetelectricity))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HY_Mesetelectricity
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_insert_proc
</UL>

<P><STRONG><a name="[1d6]"></a>HY_RecvFrameDispose</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, hyframe.o(i.HY_RecvFrameDispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HY_RecvFrameDispose &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4G_RecvFrameDispose
</UL>

<P><STRONG><a name="[1dc]"></a>HY_SendBill</STRONG> (Thumb, 804 bytes, Stack size 24 bytes, hyframe.o(i.HY_SendBill))
<BR><BR>[Stack]<UL><LI>Max Depth = 556 + Unknown Stack Size
<LI>Call Chain = HY_SendBill &rArr; HYFreamSend &rArr; ModuleSIM7600_SendData &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEXtoBCD
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYFreamSend
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriterFmBill
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4G_SendBill
</UL>

<P><STRONG><a name="[1de]"></a>HY_SendBillData</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, hyframe.o(i.HY_SendBillData))
<BR><BR>[Stack]<UL><LI>Max Depth = 556 + Unknown Stack Size
<LI>Call Chain = HY_SendBillData &rArr; HYFreamSend &rArr; ModuleSIM7600_SendData &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYFreamSend
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReSendBill
</UL>

<P><STRONG><a name="[1df]"></a>HY_SendCardInfo</STRONG> (Thumb, 346 bytes, Stack size 216 bytes, hyframe.o(i.HY_SendCardInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 748 + Unknown Stack Size
<LI>Call Chain = HY_SendCardInfo &rArr; HYFreamSend &rArr; ModuleSIM7600_SendData &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYFreamSend
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetAppRegisterState
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4G_SendCardInfo
</UL>

<P><STRONG><a name="[2]"></a>HY_SendDevStateA</STRONG> (Thumb, 372 bytes, Stack size 16 bytes, hyframe.o(i.HY_SendDevStateA))
<BR><BR>[Stack]<UL><LI>Max Depth = 548 + Unknown Stack Size
<LI>Call Chain = HY_SendDevStateA &rArr; HYFreamSend &rArr; ModuleSIM7600_SendData &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYFreamSend
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetAppRegisterState
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4G_SendDevState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hyframe.o(.data)
</UL>
<P><STRONG><a name="[1e0]"></a>HY_SendFrameDispose</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, hyframe.o(i.HY_SendFrameDispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = HY_SendFrameDispose &rArr; OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4G_SendFrameDispose
</UL>

<P><STRONG><a name="[136]"></a>HY_SendQueryRateAck</STRONG> (Thumb, 70 bytes, Stack size 112 bytes, hyframe.o(i.HY_SendQueryRateAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 644 + Unknown Stack Size
<LI>Call Chain = HY_SendQueryRateAck &rArr; HYFreamSend &rArr; ModuleSIM7600_SendData &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYFreamSend
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask4GSend
</UL>

<P><STRONG><a name="[1e1]"></a>HY_SendRateAck</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hyframe.o(i.HY_SendRateAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 540 + Unknown Stack Size
<LI>Call Chain = HY_SendRateAck &rArr; HYFreamSend &rArr; ModuleSIM7600_SendData &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYFreamSend
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4G_SendRateAck
</UL>

<P><STRONG><a name="[1da]"></a>HY_SendResetAck</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, hyframe.o(i.HY_SendResetAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 548 + Unknown Stack Size
<LI>Call Chain = HY_SendResetAck &rArr; HYFreamSend &rArr; ModuleSIM7600_SendData &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYFreamSend
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_RecvReset
</UL>

<P><STRONG><a name="[1e3]"></a>HY_SendStartAck</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, hyframe.o(i.HY_SendStartAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 548 + Unknown Stack Size
<LI>Call Chain = HY_SendStartAck &rArr; HYFreamSend &rArr; ModuleSIM7600_SendData &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYFreamSend
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4G_SendStartAck
</UL>

<P><STRONG><a name="[1e4]"></a>HY_SendStopAck</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, hyframe.o(i.HY_SendStopAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 548 + Unknown Stack Size
<LI>Call Chain = HY_SendStopAck &rArr; HYFreamSend &rArr; ModuleSIM7600_SendData &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYFreamSend
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4G_SendStopAck
</UL>

<P><STRONG><a name="[11c]"></a>HY_SendUpdataAck</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, hyframe.o(i.HY_SendUpdataAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 548 + Unknown Stack Size
<LI>Call Chain = HY_SendUpdataAck &rArr; HYFreamSend &rArr; ModuleSIM7600_SendData &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYFreamSend
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask4GMain
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_RecvHearAck
</UL>

<P><STRONG><a name="[2e8]"></a>HY_adduseelectricity</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, hyframe.o(i.HY_adduseelectricity))
<BR><BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_q_money
</UL>

<P><STRONG><a name="[52]"></a>HardFault_Handler</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, at32f4xx_it.o(i.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HardFault_Handler &rArr; fal_partition_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415cbt7.o(RESET)
</UL>
<P><STRONG><a name="[173]"></a>IWDG_Config</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, main.o(i.IWDG_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IWDG_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetReload
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetPrescaler
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_KeyRegWrite
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[1e9]"></a>IWDG_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f4xx_iwdg.o(i.IWDG_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Config
</UL>

<P><STRONG><a name="[1e6]"></a>IWDG_KeyRegWrite</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at32f4xx_iwdg.o(i.IWDG_KeyRegWrite))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Config
</UL>

<P><STRONG><a name="[174]"></a>IWDG_ReloadCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f4xx_iwdg.o(i.IWDG_ReloadCounter))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Config
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[1e7]"></a>IWDG_SetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at32f4xx_iwdg.o(i.IWDG_SetPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Config
</UL>

<P><STRONG><a name="[1e8]"></a>IWDG_SetReload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at32f4xx_iwdg.o(i.IWDG_SetReload))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Config
</UL>

<P><STRONG><a name="[171]"></a>Init_HLW8112</STRONG> (Thumb, 464 bytes, Stack size 8 bytes, hlw8112-spi.o(i.Init_HLW8112))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = Init_HLW8112 &rArr; Judge_CheckSum_HLW8112_Calfactor &rArr; Read_HLW8112_RegData &rArr; HLW8112_SPI_ReadReg &rArr; HLW8112_SPI_WriteByte &rArr; delay_u &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_underVoltage
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_V_Zero
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HLW8112_RegData
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_CheckSum_HLW8112_Calfactor
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_WriteREG_EN
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_WriteREG_DIS
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_SPI_WriteReg
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_SPI_WriteByte
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_m
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_u
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_Measure
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_Dispose
</UL>

<P><STRONG><a name="[1ec]"></a>Judge_CheckSum_HLW8112_Calfactor</STRONG> (Thumb, 312 bytes, Stack size 16 bytes, hlw8112-spi.o(i.Judge_CheckSum_HLW8112_Calfactor))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = Judge_CheckSum_HLW8112_Calfactor &rArr; Read_HLW8112_RegData &rArr; HLW8112_SPI_ReadReg &rArr; HLW8112_SPI_WriteByte &rArr; delay_u &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HLW8112_RegData
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_HLW8112
</UL>

<P><STRONG><a name="[11f]"></a>JumpToProgramCode</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, main.o(i.JumpToProgramCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = JumpToProgramCode
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask4GMain
</UL>

<P><STRONG><a name="[16f]"></a>Mcu_Io_Init</STRONG> (Thumb, 388 bytes, Stack size 8 bytes, device.o(i.Mcu_Io_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Mcu_Io_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinsRemapConfig
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[53]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32f4xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415cbt7.o(RESET)
</UL>
<P><STRONG><a name="[181]"></a>Mem_Clr</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, lib_mem.o(i.Mem_Clr))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Mem_Clr &rArr; Mem_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_NameClr
</UL>

<P><STRONG><a name="[1f3]"></a>Mem_Set</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lib_mem.o(i.Mem_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Mem_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Clr
</UL>

<P><STRONG><a name="[18a]"></a>ModuleSIM7600_ConnectServer</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, modulea7680c.o(i.ModuleSIM7600_ConnectServer))
<BR><BR>[Stack]<UL><LI>Max Depth = 276 + Unknown Stack Size
<LI>Call Chain = ModuleSIM7600_ConnectServer &rArr; Module_ConnectServer &rArr; UART_4GWrite &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_NETOPEN
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_ConnectServer
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Connect_4G
</UL>

<P><STRONG><a name="[1d1]"></a>ModuleSIM7600_SendData</STRONG> (Thumb, 226 bytes, Stack size 64 bytes, modulea7680c.o(i.ModuleSIM7600_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = ModuleSIM7600_SendData &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1SENDBUF
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYFreamSend
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZF_SendStartCharge
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZF_SendBill
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZF_SendRegister
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZF_SendHear
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZF_SendDevState
</UL>

<P><STRONG><a name="[11b]"></a>Module_HTTPDownload</STRONG> (Thumb, 642 bytes, Stack size 24 bytes, modulea7680c.o(i.Module_HTTPDownload))
<BR><BR>[Stack]<UL><LI>Max Depth = 308 + Unknown Stack Size
<LI>Call Chain = Module_HTTPDownload &rArr; Send_AT_HTTPPAR &rArr; UART_4GWrite &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_READ
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_HTTPTERM
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_HTTPPAR
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_HTTPINIT
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_GET
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_EnterATCmd
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RecvDataControl
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask4GMain
</UL>

<P><STRONG><a name="[189]"></a>Module_SIM7600Test</STRONG> (Thumb, 466 bytes, Stack size 8 bytes, modulea7680c.o(i.Module_SIM7600Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = Module_SIM7600Test &rArr; Send_AT_SetCIPRXGET &rArr; UART_4GWrite &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_SetCIPRXGET
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_NOTCIPMODE
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CIMI
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CGDCONT
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CSQ
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CIPMODE
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Connect_4G
</UL>

<P><STRONG><a name="[187]"></a>Munu13_ShowSysInfo</STRONG> (Thumb, 448 bytes, Stack size 48 bytes, dwin_com_pro.o(i.Munu13_ShowSysInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = Munu13_ShowSysInfo &rArr; Dis_ShowStatus &rArr; PrintStr &rArr; LCD_SendToUart &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintIcon
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_ShowStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;passwordmodify
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_PortSert
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_IP4Sert
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_IP3Sert
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_IP2Sert
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_IP1Sert
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_DevnumDispose
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu12_CodeDispose
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Company_code
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent14
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent13
</UL>

<P><STRONG><a name="[1d3]"></a>Munu27_ShowSysInfo</STRONG> (Thumb, 2128 bytes, Stack size 520 bytes, dwin_com_pro.o(i.Munu27_ShowSysInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = Munu27_ShowSysInfo &rArr; DisplayCommonMenu &rArr; PrintBackImage &rArr; PraPerprintBackImage &rArr; LCD_SendToUart &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurMenu
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNum16uVariable
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent28
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent27
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent13
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent1
</UL>

<P><STRONG><a name="[51]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415cbt7.o(RESET)
</UL>
<P><STRONG><a name="[1b1]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Int_Init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Int_Init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERTC_TimeStampConfig
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2Dispinit
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART14Ginit
</UL>

<P><STRONG><a name="[17a]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[216]"></a>OSCfg_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cfg_app.o(i.OSCfg_Init))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[248]"></a>OSIdleTaskHook</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSIdleTaskHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSIdleTaskHook
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IdleTask
</UL>

<P><STRONG><a name="[206]"></a>OSInit</STRONG> (Thumb, 270 bytes, Stack size 16 bytes, os_core.o(i.OSInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = OSInit &rArr; OS_TmrInit &rArr; OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrInit
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickTaskInit
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskInit
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTaskInit
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SemInit
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioInit
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexInit
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgPoolInit
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemInit
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Dbg_Init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInit
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IdleTaskInit
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCfg_Init
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHook
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[207]"></a>OSInitHook</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSInitHook))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[28c]"></a>OSIntEnter</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, os_core.o(i.OSIntEnter))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[217]"></a>OSIntExit</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, os_core.o(i.OSIntExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntCtxSw
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioGetHighest
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[113]"></a>OSMutexCreate</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, os_mutex.o(i.OSMutexCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSMutexCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListInit
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexDbgListAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask4GMain
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrInit
</UL>

<P><STRONG><a name="[1f6]"></a>OSMutexPend</STRONG> (Thumb, 574 bytes, Stack size 64 bytes, os_mutex.o(i.OSMutexPend))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioInsert
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsertHead
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListChangePrio
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Pend
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrLock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleSIM7600_SendData
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_4GWrite
</UL>

<P><STRONG><a name="[1f7]"></a>OSMutexPost</STRONG> (Thumb, 354 bytes, Stack size 40 bytes, os_mutex.o(i.OSMutexPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = OSMutexPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioInsert
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsertTail
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrUnlock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleSIM7600_SendData
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_4GWrite
</UL>

<P><STRONG><a name="[121]"></a>OSQCreate</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, os_q.o(i.OSQCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSQCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListInit
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QDbgListAdd
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQInit
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskdlt645
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskDwin
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask4GSend
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask4GRecv
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_task_init
</UL>

<P><STRONG><a name="[227]"></a>OSQPend</STRONG> (Thumb, 446 bytes, Stack size 72 bytes, os_q.o(i.OSQPend))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = OSQPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Pend
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQGet
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_recv_msg
</UL>

<P><STRONG><a name="[229]"></a>OSQPost</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, os_q.o(i.OSQPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QPost
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_send_msg
</UL>

<P><STRONG><a name="[221]"></a>OSSched</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, os_core.o(i.OSSched))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCtxSw
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioGetHighest
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSuspend
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSemPost
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskResume
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QPost
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
</UL>

<P><STRONG><a name="[15a]"></a>OSSchedLock</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, os_core.o(i.OSSchedLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSSchedLock &rArr; OS_SchedLockTimeMeasStart
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedLockTimeMeasStart
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskDwin
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrTask
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_osschedlock
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_send_msg
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_cycle_get_8112
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_ReadDone_Ack
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_ReadData_Ack
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_HttpStart_Ack
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_HttpGet_Ack
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_HttpConect_Ack
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_SetReAct_Ack
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_SendAck1Cmd_Ack
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_SendAck0Cmd_Ack
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_NETOPEN_Ack
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ConnectServer1_Ack
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ConnectServer1Cmd_Ack
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ConnectServer0_Ack
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ConnectServer0Cmd_Ack
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_CSQ_Ack
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_CIPMODE_Ack
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_CIMI_Ack
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_CGDCONT_Ack
</UL>

<P><STRONG><a name="[15c]"></a>OSSchedUnlock</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, os_core.o(i.OSSchedUnlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedLockTimeMeasStop
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskDwin
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrTask
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_osschedunlock
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_send_msg
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_cycle_get_8112
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_ReadDone_Ack
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_ReadData_Ack
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_HttpStart_Ack
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_HttpGet_Ack
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_HttpConect_Ack
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_SetReAct_Ack
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_SendAck1Cmd_Ack
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_SendAck0Cmd_Ack
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_NETOPEN_Ack
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ConnectServer1_Ack
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ConnectServer1Cmd_Ack
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ConnectServer0_Ack
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ConnectServer0Cmd_Ack
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_CSQ_Ack
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_CIPMODE_Ack
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_CIMI_Ack
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_CGDCONT_Ack
</UL>

<P><STRONG><a name="[22e]"></a>OSStart</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, os_core.o(i.OSStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSStart &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStartHighRdy
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioGetHighest
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[230]"></a>OSStatReset</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, os_stat.o(i.OSStatReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSStatReset
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrResetPeak
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListResetPeak
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
</UL>

<P><STRONG><a name="[16a]"></a>OSStatTaskCPUUsageInit</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, os_stat.o(i.OSStatTaskCPUUsageInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = OSStatTaskCPUUsageInit &rArr; OSTaskSuspend &rArr; OS_TaskSuspend &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[254]"></a>OSStatTaskHook</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSStatTaskHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSStatTaskHook
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
</UL>

<P><STRONG><a name="[155]"></a>OSTaskCreate</STRONG> (Thumb, 392 bytes, Stack size 72 bytes, os_task.o(i.OSTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioInsert
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsertTail
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskInitTCB
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskDbgListAdd
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQInit
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCreate
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrInit
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickTaskInit
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTaskInit
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IdleTaskInit
</UL>

<P><STRONG><a name="[237]"></a>OSTaskCreateHook</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTaskCreateHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskCreateHook
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[239]"></a>OSTaskDel</STRONG> (Thumb, 278 bytes, Stack size 16 bytes, os_task.o(i.OSTaskDel))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = OSTaskDel &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListRemove
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListRemove
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelHook
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskInitTCB
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskDbgListRemove
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQFreeAll
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskReturn
</UL>

<P><STRONG><a name="[23d]"></a>OSTaskDelHook</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTaskDelHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskDelHook
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[234]"></a>OSTaskResume</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, os_task.o(i.OSTaskResume))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OSTaskResume &rArr; OS_TaskResume &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskResume
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatTaskCPUUsageInit
</UL>

<P><STRONG><a name="[256]"></a>OSTaskReturnHook</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTaskReturnHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskReturnHook
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskReturn
</UL>

<P><STRONG><a name="[240]"></a>OSTaskSemPend</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, os_task.o(i.OSTaskSemPend))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = OSTaskSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Pend
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrTask
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickTask
</UL>

<P><STRONG><a name="[241]"></a>OSTaskSemPost</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, os_task.o(i.OSTaskSemPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = OSTaskSemPost &rArr; OS_TaskSemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>

<P><STRONG><a name="[243]"></a>OSTaskStkChk</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, os_task.o(i.OSTaskStkChk))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
</UL>

<P><STRONG><a name="[236]"></a>OSTaskStkInit</STRONG> (Thumb, 192 bytes, Stack size 20 bytes, os_cpu_c.o(i.OSTaskStkInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OSTaskStkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[233]"></a>OSTaskSuspend</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, os_task.o(i.OSTaskSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = OSTaskSuspend &rArr; OS_TaskSuspend &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSuspend
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatTaskCPUUsageInit
</UL>

<P><STRONG><a name="[93]"></a>OSTaskSwHook</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTaskSwHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskSwHook
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_a.o(CODE)
</UL>
<P><STRONG><a name="[112]"></a>OSTimeDly</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, os_time.o(i.OSTimeDly))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListInsertDly
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatTaskCPUUsageInit
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskdlt645
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskDwin
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCharge
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCard
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask4GSend
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask4GRecv
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask4GMain
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ostimedly
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_flag
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_task_init
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_ctl_enable
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_ctl_disable
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleSIM7600_SendData
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM7600Reset
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_SIM7600Test
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_HTTPDownload
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleSIM7600_ConnectServer
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_4GWrite
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_Reset
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_PcdReset
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startchargUnlock
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_change_card
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slotcard_state
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendToUart
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dwin_state_dispose
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_DevnumDispose
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent25
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent16
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent14
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent13
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent1
</UL>

<P><STRONG><a name="[111]"></a>OSTimeGet</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, os_time.o(i.OSTimeGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskdlt645
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask4GSend
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask4GRecv
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask4GMain
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_recvdispose
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_RecvDispose
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_RecvDispose
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_RecvDispose
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_cycle_get_8112
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_Dispose
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;electricity_err
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_wait_car_ready
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_start_func
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_jump_new_stat
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_under_volt
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_under_cp9v
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_over_volt
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_over_current
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_low_current_9V
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_cp_off
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZF_SendFrameDispose
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_HTTPDownload
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendFrameDispose
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendBill
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReSendBill
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dwin_state_dispose
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dwin_period_entry
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_show
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ad_entry
</UL>

<P><STRONG><a name="[246]"></a>OSTimeTick</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, os_time.o(i.OSTimeTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = OSTimeTick &rArr; OSTaskSemPost &rArr; OS_TaskSemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[247]"></a>OSTimeTickHook</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTimeTickHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTimeTickHook
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>

<P><STRONG><a name="[169]"></a>OS_CPU_SysTickInit</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, os_cpu_c.o(i.OS_CPU_SysTickInit))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[215]"></a>OS_Dbg_Init</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, os_dbg.o(i.OS_Dbg_Init))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[20a]"></a>OS_FlagInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, os_flag.o(i.OS_FlagInit))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[9c]"></a>OS_IdleTask</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, os_core.o(i.OS_IdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OS_IdleTask &rArr; OSIdleTaskHook
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIdleTaskHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(i.OS_IdleTaskInit)
</UL>
<P><STRONG><a name="[211]"></a>OS_IdleTaskInit</STRONG> (Thumb, 66 bytes, Stack size 48 bytes, os_core.o(i.OS_IdleTaskInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = OS_IdleTaskInit &rArr; OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[20b]"></a>OS_MemInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, os_mem.o(i.OS_MemInit))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[20c]"></a>OS_MsgPoolInit</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, os_msg.o(i.OS_MsgPoolInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_MsgPoolInit
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[23c]"></a>OS_MsgQFreeAll</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, os_msg.o(i.OS_MsgQFreeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_MsgQFreeAll
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[228]"></a>OS_MsgQGet</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, os_msg.o(i.OS_MsgQGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OS_MsgQGet
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
</UL>

<P><STRONG><a name="[225]"></a>OS_MsgQInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, os_msg.o(i.OS_MsgQInit))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskInitTCB
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
</UL>

<P><STRONG><a name="[252]"></a>OS_MsgQPut</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, os_msg.o(i.OS_MsgQPut))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OS_MsgQPut
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QPost
</UL>

<P><STRONG><a name="[21b]"></a>OS_MutexDbgListAdd</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, os_mutex.o(i.OS_MutexDbgListAdd))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexCreate
</UL>

<P><STRONG><a name="[20d]"></a>OS_MutexInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, os_mutex.o(i.OS_MutexInit))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[220]"></a>OS_Pend</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, os_core.o(i.OS_Pend))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskBlock
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListInsertPrio
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendDbgNameAdd
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendDataInit
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
</UL>

<P><STRONG><a name="[24a]"></a>OS_PendDataInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, os_core.o(i.OS_PendDataInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_PendDataInit
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Pend
</UL>

<P><STRONG><a name="[24c]"></a>OS_PendDbgNameAdd</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, os_core.o(i.OS_PendDbgNameAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_PendDbgNameAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Pend
</UL>

<P><STRONG><a name="[24f]"></a>OS_PendDbgNameRemove</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, os_core.o(i.OS_PendDbgNameRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_PendDbgNameRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
</UL>

<P><STRONG><a name="[21f]"></a>OS_PendListChangePrio</STRONG> (Thumb, 70 bytes, Stack size 28 bytes, os_core.o(i.OS_PendListChangePrio))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OS_PendListChangePrio &rArr; OS_PendListInsertPrio
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListRemove1
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListInsertPrio
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
</UL>

<P><STRONG><a name="[21a]"></a>OS_PendListInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, os_core.o(i.OS_PendListInit))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexCreate
</UL>

<P><STRONG><a name="[24b]"></a>OS_PendListInsertPrio</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, os_core.o(i.OS_PendListInsertPrio))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OS_PendListInsertPrio
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListChangePrio
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Pend
</UL>

<P><STRONG><a name="[23b]"></a>OS_PendListRemove</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, os_core.o(i.OS_PendListRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListRemove1
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateTimeout
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[24d]"></a>OS_PendListRemove1</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, os_core.o(i.OS_PendListRemove1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_PendListRemove1
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListRemove
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListChangePrio
</UL>

<P><STRONG><a name="[224]"></a>OS_Post</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, os_core.o(i.OS_Post))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListRemove
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsert
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post1
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListRemove
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendDbgNameRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSemPost
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QPost
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
</UL>

<P><STRONG><a name="[24e]"></a>OS_Post1</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, os_core.o(i.OS_Post1))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OS_Post1
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
</UL>

<P><STRONG><a name="[218]"></a>OS_PrioGetHighest</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, os_prio.o(i.OS_PrioGetHighest))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CntLeadZeros
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>

<P><STRONG><a name="[208]"></a>OS_PrioInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_prio.o(i.OS_PrioInit))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[21d]"></a>OS_PrioInsert</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, os_prio.o(i.OS_PrioInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_PrioInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsert
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
</UL>

<P><STRONG><a name="[253]"></a>OS_PrioRemove</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, os_prio.o(i.OS_PrioRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_PrioRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
</UL>

<P><STRONG><a name="[226]"></a>OS_QDbgListAdd</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, os_q.o(i.OS_QDbgListAdd))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
</UL>

<P><STRONG><a name="[20e]"></a>OS_QInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, os_q.o(i.OS_QInit))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[22a]"></a>OS_QPost</STRONG> (Thumb, 190 bytes, Stack size 56 bytes, os_q.o(i.OS_QPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQPut
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
</UL>

<P><STRONG><a name="[209]"></a>OS_RdyListInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, os_core.o(i.OS_RdyListInit))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[250]"></a>OS_RdyListInsert</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, os_core.o(i.OS_RdyListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OS_RdyListInsert &rArr; OS_PrioInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioInsert
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsertTail
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsertHead
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateTimeout
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateDly
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskResume
</UL>

<P><STRONG><a name="[21e]"></a>OS_RdyListInsertHead</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, os_core.o(i.OS_RdyListInsertHead))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_RdyListInsertHead
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsert
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
</UL>

<P><STRONG><a name="[223]"></a>OS_RdyListInsertTail</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, os_core.o(i.OS_RdyListInsertTail))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_RdyListInsertTail
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsert
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
</UL>

<P><STRONG><a name="[21c]"></a>OS_RdyListRemove</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, os_core.o(i.OS_RdyListRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskBlock
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSuspend
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
</UL>

<P><STRONG><a name="[22c]"></a>OS_SchedLockTimeMeasStart</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, os_core.o(i.OS_SchedLockTimeMeasStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_SchedLockTimeMeasStart
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>

<P><STRONG><a name="[22d]"></a>OS_SchedLockTimeMeasStop</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, os_core.o(i.OS_SchedLockTimeMeasStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_SchedLockTimeMeasStop
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
</UL>

<P><STRONG><a name="[20f]"></a>OS_SemInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, os_sem.o(i.OS_SemInit))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[9d]"></a>OS_StatTask</STRONG> (Thumb, 684 bytes, Stack size 24 bytes, os_stat.o(i.OS_StatTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = OS_StatTask &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatTaskHook
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_stat.o(i.OS_StatTaskInit)
</UL>
<P><STRONG><a name="[213]"></a>OS_StatTaskInit</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, os_stat.o(i.OS_StatTaskInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = OS_StatTaskInit &rArr; OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[249]"></a>OS_TaskBlock</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, os_core.o(i.OS_TaskBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListInsert
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Pend
</UL>

<P><STRONG><a name="[238]"></a>OS_TaskDbgListAdd</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, os_task.o(i.OS_TaskDbgListAdd))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[23e]"></a>OS_TaskDbgListRemove</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, os_task.o(i.OS_TaskDbgListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[210]"></a>OS_TaskInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, os_task.o(i.OS_TaskInit))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[235]"></a>OS_TaskInitTCB</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, os_task.o(i.OS_TaskInitTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_TaskInitTCB
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQInit
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[23f]"></a>OS_TaskResume</STRONG> (Thumb, 256 bytes, Stack size 16 bytes, os_task.o(i.OS_TaskResume))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OS_TaskResume &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsert
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
</UL>

<P><STRONG><a name="[9b]"></a>OS_TaskReturn</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, os_task.o(i.OS_TaskReturn))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = OS_TaskReturn &rArr; OSTaskDel &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskReturnHook
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_c.o(i.OSTaskStkInit)
</UL>
<P><STRONG><a name="[242]"></a>OS_TaskSemPost</STRONG> (Thumb, 448 bytes, Stack size 32 bytes, os_task.o(i.OS_TaskSemPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = OS_TaskSemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPost
</UL>

<P><STRONG><a name="[244]"></a>OS_TaskSuspend</STRONG> (Thumb, 272 bytes, Stack size 16 bytes, os_task.o(i.OS_TaskSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = OS_TaskSuspend &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
</UL>

<P><STRONG><a name="[255]"></a>OS_TickListInsert</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, os_tick.o(i.OS_TickListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_TickListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskBlock
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListInsertDly
</UL>

<P><STRONG><a name="[245]"></a>OS_TickListInsertDly</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, os_tick.o(i.OS_TickListInsertDly))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>

<P><STRONG><a name="[23a]"></a>OS_TickListRemove</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, os_tick.o(i.OS_TickListRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_TickListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[231]"></a>OS_TickListResetPeak</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_tick.o(i.OS_TickListResetPeak))
<BR><BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatReset
</UL>

<P><STRONG><a name="[9e]"></a>OS_TickTask</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, os_tick.o(i.OS_TickTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = OS_TickTask &rArr; OSTaskSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateTimeout
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateDly
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_tick.o(i.OS_TickTaskInit)
</UL>
<P><STRONG><a name="[212]"></a>OS_TickTaskInit</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, os_tick.o(i.OS_TickTaskInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = OS_TickTaskInit &rArr; OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[214]"></a>OS_TmrInit</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, os_tmr.o(i.OS_TmrInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = OS_TmrInit &rArr; OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[232]"></a>OS_TmrResetPeak</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_tmr.o(i.OS_TmrResetPeak))
<BR><BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatReset
</UL>

<P><STRONG><a name="[9f]"></a>OS_TmrTask</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, os_tmr.o(i.OS_TmrTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = OS_TmrTask &rArr; OS_TmrLock &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrUnlink
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrUnlock
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrLock
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_tmr.o(i.OS_TmrInit)
</UL>
<P><STRONG><a name="[25a]"></a>OS_TmrUnlink</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, os_tmr.o(i.OS_TmrUnlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_TmrUnlink
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrTask
</UL>

<P><STRONG><a name="[19e]"></a>PWR_BackupAccessCtrl</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at32f4xx_pwr.o(i.PWR_BackupAccessCtrl))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ertc
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERTC_Config
</UL>

<P><STRONG><a name="[25d]"></a>PraPerprintBackImage</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, dwinprotocol.o(i.PraPerprintBackImage))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = PraPerprintBackImage &rArr; LCD_SendToUart &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendToUart
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendByteToBuf
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwin_FrameHead
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintBackImage
</UL>

<P><STRONG><a name="[25e]"></a>Pre4GBill</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, 4gmain.o(i.Pre4GBill))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Pre4GBill &rArr; PreHYBill &rArr; time
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreHYBill
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriterFmBill
</UL>

<P><STRONG><a name="[25f]"></a>PreHYBill</STRONG> (Thumb, 652 bytes, Stack size 24 bytes, hyframe.o(i.PreHYBill))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PreHYBill &rArr; time
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEXtoBCD
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pre4GBill
</UL>

<P><STRONG><a name="[196]"></a>PrintBackImage</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dwinprotocol.o(i.PrintBackImage))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = PrintBackImage &rArr; PraPerprintBackImage &rArr; LCD_SendToUart &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PraPerprintBackImage
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>

<P><STRONG><a name="[192]"></a>PrintIcon</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, dwinprotocol.o(i.PrintIcon))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = PrintIcon &rArr; LCD_SendToUart &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendTwoBytes
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendToUart
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendByteToBuf
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwin_FrameHead
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_show_state
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispShow_NetState
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_ShowSysInfo
</UL>

<P><STRONG><a name="[10a]"></a>PrintNum16uVariable</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, dwinprotocol.o(i.PrintNum16uVariable))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = PrintNum16uVariable &rArr; LCD_SendToUart &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendTwoBytes
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendToUart
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendByteToBuf
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwin_FrameHead
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu27_ShowSysInfo
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SelectUpNChargeRecode
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SelectNextNChargeRecode
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SelectCurChargeRecode
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent20
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent19
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent18
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent17
</UL>

<P><STRONG><a name="[260]"></a>PrintNum32uVariable</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, dwinprotocol.o(i.PrintNum32uVariable))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = PrintNum32uVariable &rArr; LCD_SendToUart &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendTwoBytes
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendToUart
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendFourBytes
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendByteToBuf
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwin_FrameHead
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_change_card
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_show
</UL>

<P><STRONG><a name="[18d]"></a>PrintStr</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, dwinprotocol.o(i.PrintStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = PrintStr &rArr; LCD_SendToUart &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendTwoBytes
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendToUart
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendByteToBuf
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwin_FrameHead
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_ShowTime
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_SYSShowTime
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_para_init
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_show_state
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_show_record
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_show
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_DevnumDispose
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispShow_Recode
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_ShowStatus
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_ShowSysInfo
</UL>

<P><STRONG><a name="[261]"></a>RC522_CalulateCRC</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, rc522.o(i.RC522_CalulateCRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = RC522_CalulateCRC &rArr; RC522_SetBitMask &rArr; RC522_WriteRawRC &rArr; RC522_ReadWriteByte &rArr; delay_u &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_WriteRawRC
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_SetBitMask
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_ReadRawRC
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_ClearBitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_PcdWrite
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_PcdSelect
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_PcdRead
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_PcdValue
</UL>

<P><STRONG><a name="[262]"></a>RC522_ClearBitMask</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, rc522.o(i.RC522_ClearBitMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = RC522_ClearBitMask &rArr; RC522_WriteRawRC &rArr; RC522_ReadWriteByte &rArr; delay_u &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_WriteRawRC
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_ReadRawRC
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_PcdSelect
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_PcdComMF522
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_PcdAntennaOff
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_CalulateCRC
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_PcdRequest
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_PcdAnticoll
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_M500PcdConfigISOType
</UL>

<P><STRONG><a name="[266]"></a>RC522_GPIOInit</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, rc522.o(i.RC522_GPIOInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = RC522_GPIOInit &rArr; RC522_ReadWriteByte &rArr; delay_u &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_Init
</UL>

<P><STRONG><a name="[140]"></a>RC522_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rc522.o(i.RC522_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = RC522_Init &rArr; RC522_Reset &rArr; RC522_PcdAntennaOn &rArr; RC522_SetBitMask &rArr; RC522_WriteRawRC &rArr; RC522_ReadWriteByte &rArr; delay_u &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_WriteRawRC
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_ReadRawRC
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_GPIOInit
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_Reset
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCard
</UL>

<P><STRONG><a name="[142]"></a>RC522_M500PcdConfigISOType</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, rc522.o(i.RC522_M500PcdConfigISOType))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = RC522_M500PcdConfigISOType &rArr; RC522_PcdAntennaOn &rArr; RC522_SetBitMask &rArr; RC522_WriteRawRC &rArr; RC522_ReadWriteByte &rArr; delay_u &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RC522_delay_ns
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_WriteRawRC
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_PcdAntennaOn
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_ClearBitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCard
</UL>

<P><STRONG><a name="[26b]"></a>RC522_PcdAntennaOff</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rc522.o(i.RC522_PcdAntennaOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = RC522_PcdAntennaOff &rArr; RC522_ClearBitMask &rArr; RC522_WriteRawRC &rArr; RC522_ReadWriteByte &rArr; delay_u &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_ClearBitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_Reset
</UL>

<P><STRONG><a name="[26a]"></a>RC522_PcdAntennaOn</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rc522.o(i.RC522_PcdAntennaOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = RC522_PcdAntennaOn &rArr; RC522_SetBitMask &rArr; RC522_WriteRawRC &rArr; RC522_ReadWriteByte &rArr; delay_u &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_SetBitMask
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_ReadRawRC
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_Reset
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_M500PcdConfigISOType
</UL>

<P><STRONG><a name="[26c]"></a>RC522_PcdAnticoll</STRONG> (Thumb, 112 bytes, Stack size 48 bytes, rc522.o(i.RC522_PcdAnticoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = RC522_PcdAnticoll &rArr; RC522_PcdComMF522 &rArr; RC522_SetBitMask &rArr; RC522_WriteRawRC &rArr; RC522_ReadWriteByte &rArr; delay_u &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_WriteRawRC
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_SetBitMask
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_PcdComMF522
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_ClearBitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_WriteCard
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_ReadCard
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_read_nuid
</UL>

<P><STRONG><a name="[26e]"></a>RC522_PcdAuthState</STRONG> (Thumb, 110 bytes, Stack size 56 bytes, rc522.o(i.RC522_PcdAuthState))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = RC522_PcdAuthState &rArr; RC522_PcdComMF522 &rArr; RC522_SetBitMask &rArr; RC522_WriteRawRC &rArr; RC522_ReadWriteByte &rArr; delay_u &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_ReadRawRC
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_PcdComMF522
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_WriteCard
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_ReadCard
</UL>

<P><STRONG><a name="[26d]"></a>RC522_PcdComMF522</STRONG> (Thumb, 318 bytes, Stack size 48 bytes, rc522.o(i.RC522_PcdComMF522))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = RC522_PcdComMF522 &rArr; RC522_SetBitMask &rArr; RC522_WriteRawRC &rArr; RC522_ReadWriteByte &rArr; delay_u &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_WriteRawRC
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_SetBitMask
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_ReadRawRC
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_ClearBitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_PcdWrite
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_PcdSelect
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_PcdRead
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_PcdAuthState
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_PcdValue
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_PcdRequest
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_PcdAnticoll
</UL>

<P><STRONG><a name="[26f]"></a>RC522_PcdRead</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, rc522.o(i.RC522_PcdRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = RC522_PcdRead &rArr; RC522_PcdComMF522 &rArr; RC522_SetBitMask &rArr; RC522_WriteRawRC &rArr; RC522_ReadWriteByte &rArr; delay_u &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_PcdComMF522
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_CalulateCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_ReadCard
</UL>

<P><STRONG><a name="[270]"></a>RC522_PcdRequest</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, rc522.o(i.RC522_PcdRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = RC522_PcdRequest &rArr; RC522_PcdComMF522 &rArr; RC522_SetBitMask &rArr; RC522_WriteRawRC &rArr; RC522_ReadWriteByte &rArr; delay_u &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_WriteRawRC
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_SetBitMask
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_PcdComMF522
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_ClearBitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_WriteCard
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_ReadCard
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_read_nuid
</UL>

<P><STRONG><a name="[141]"></a>RC522_PcdReset</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, rc522.o(i.RC522_PcdReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = RC522_PcdReset &rArr; RC522_WriteRawRC &rArr; RC522_ReadWriteByte &rArr; delay_u &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_WriteRawRC
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCard
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_Reset
</UL>

<P><STRONG><a name="[271]"></a>RC522_PcdSelect</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, rc522.o(i.RC522_PcdSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = RC522_PcdSelect &rArr; RC522_PcdComMF522 &rArr; RC522_SetBitMask &rArr; RC522_WriteRawRC &rArr; RC522_ReadWriteByte &rArr; delay_u &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_PcdComMF522
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_ClearBitMask
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_CalulateCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_WriteCard
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_ReadCard
</UL>

<P><STRONG><a name="[272]"></a>RC522_PcdValue</STRONG> (Thumb, 208 bytes, Stack size 48 bytes, rc522.o(i.RC522_PcdValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = RC522_PcdValue &rArr; RC522_PcdComMF522 &rArr; RC522_SetBitMask &rArr; RC522_WriteRawRC &rArr; RC522_ReadWriteByte &rArr; delay_u &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_PcdComMF522
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_CalulateCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_change_card
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startchargUnlock
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_settlement
</UL>

<P><STRONG><a name="[273]"></a>RC522_PcdWrite</STRONG> (Thumb, 150 bytes, Stack size 48 bytes, rc522.o(i.RC522_PcdWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = RC522_PcdWrite &rArr; RC522_PcdComMF522 &rArr; RC522_SetBitMask &rArr; RC522_WriteRawRC &rArr; RC522_ReadWriteByte &rArr; delay_u &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_PcdComMF522
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_CalulateCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_WriteCard
</UL>

<P><STRONG><a name="[274]"></a>RC522_ReadCard</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, rc522.o(i.RC522_ReadCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = RC522_ReadCard &rArr; RC522_PcdAuthState &rArr; RC522_PcdComMF522 &rArr; RC522_SetBitMask &rArr; RC522_WriteRawRC &rArr; RC522_ReadWriteByte &rArr; delay_u &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_PcdSelect
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_PcdRead
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_PcdAuthState
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_PcdRequest
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_PcdAnticoll
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_lock_state
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_card_type
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_card_money
</UL>

<P><STRONG><a name="[265]"></a>RC522_ReadRawRC</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, rc522.o(i.RC522_ReadRawRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = RC522_ReadRawRC &rArr; RC522_ReadWriteByte &rArr; delay_u &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_SetBitMask
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_PcdComMF522
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_PcdAuthState
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_PcdAntennaOn
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_ClearBitMask
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_CalulateCRC
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_Init
</UL>

<P><STRONG><a name="[267]"></a>RC522_ReadWriteByte</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, rc522.o(i.RC522_ReadWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = RC522_ReadWriteByte &rArr; delay_u &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_u
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_WriteRawRC
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_ReadRawRC
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_GPIOInit
</UL>

<P><STRONG><a name="[268]"></a>RC522_Reset</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rc522.o(i.RC522_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = RC522_Reset &rArr; RC522_PcdAntennaOn &rArr; RC522_SetBitMask &rArr; RC522_WriteRawRC &rArr; RC522_ReadWriteByte &rArr; delay_u &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_PcdAntennaOn
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_PcdAntennaOff
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_PcdReset
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_read_nuid
</UL>

<P><STRONG><a name="[264]"></a>RC522_SetBitMask</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, rc522.o(i.RC522_SetBitMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = RC522_SetBitMask &rArr; RC522_WriteRawRC &rArr; RC522_ReadWriteByte &rArr; delay_u &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_WriteRawRC
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_ReadRawRC
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_PcdComMF522
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_PcdAntennaOn
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_CalulateCRC
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_PcdRequest
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_PcdAnticoll
</UL>

<P><STRONG><a name="[276]"></a>RC522_WriteCard</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, rc522.o(i.RC522_WriteCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = RC522_WriteCard &rArr; RC522_PcdAuthState &rArr; RC522_PcdComMF522 &rArr; RC522_SetBitMask &rArr; RC522_WriteRawRC &rArr; RC522_ReadWriteByte &rArr; delay_u &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_PcdWrite
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_PcdSelect
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_PcdAuthState
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_PcdRequest
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_PcdAnticoll
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writer_lock_state
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_CardMCUID
</UL>

<P><STRONG><a name="[263]"></a>RC522_WriteRawRC</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, rc522.o(i.RC522_WriteRawRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = RC522_WriteRawRC &rArr; RC522_ReadWriteByte &rArr; delay_u &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_SetBitMask
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_PcdComMF522
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_ClearBitMask
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_CalulateCRC
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_PcdReset
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_PcdRequest
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_PcdAnticoll
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_M500PcdConfigISOType
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_Init
</UL>

<P><STRONG><a name="[278]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, at32f4xx_rcc.o(i.RCC_ADCCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration_
</UL>

<P><STRONG><a name="[279]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, at32f4xx_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration_
</UL>

<P><STRONG><a name="[19d]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, at32f4xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ertc
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERTC_Config
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_PWM_Conrtol
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2Dispinit
</UL>

<P><STRONG><a name="[1eb]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, at32f4xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_Flash_Io_Init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_Io_Init
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_HLW8112
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration_
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_PWM_Conrtol
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2Dispinit
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART14Ginit
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_GPIOInit
</UL>

<P><STRONG><a name="[19f]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at32f4xx_rcc.o(i.RCC_BackupResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERTC_Config
</UL>

<P><STRONG><a name="[277]"></a>RCC_Configuration_</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, adc.o(i.RCC_Configuration_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_Configuration_
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ADCCLKConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[1a3]"></a>RCC_ERTCCLKCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at32f4xx_rcc.o(i.RCC_ERTCCLKCmd))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERTC_Config
</UL>

<P><STRONG><a name="[1a2]"></a>RCC_ERTCCLKConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, at32f4xx_rcc.o(i.RCC_ERTCCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERTC_Config
</UL>

<P><STRONG><a name="[179]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 678 bytes, Stack size 36 bytes, at32f4xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CPU_ClkFreq
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[1a1]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, at32f4xx_rcc.o(i.RCC_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ertc
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERTC_Config
</UL>

<P><STRONG><a name="[1a0]"></a>RCC_LSEConfig</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, at32f4xx_rcc.o(i.RCC_LSEConfig))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERTC_Config
</UL>

<P><STRONG><a name="[288]"></a>RCC_PLLFrefTableConfig</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, at32f4xx_rcc.o(i.RCC_PLLFrefTableConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_PLLFrefTableConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo144M
</UL>

<P><STRONG><a name="[289]"></a>RCC_StepModeCmd</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, at32f4xx_rcc.o(i.RCC_StepModeCmd))
<BR><BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo144M
</UL>

<P><STRONG><a name="[132]"></a>ReSendBill</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, 4gmain.o(i.ReSendBill))
<BR><BR>[Stack]<UL><LI>Max Depth = 572 + Unknown Stack Size
<LI>Call Chain = ReSendBill &rArr; HY_SendBillData &rArr; HYFreamSend &rArr; ModuleSIM7600_SendData &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendBillData
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask4GSend
</UL>

<P><STRONG><a name="[1d4]"></a>ReadDwinVariable</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, dwinprotocol.o(i.ReadDwinVariable))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = ReadDwinVariable &rArr; LCD_SendToUart &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendTwoBytes
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendToUart
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendByteToBuf
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwin_FrameHead
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent22
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent20
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent19
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent18
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent17
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent14
</UL>

<P><STRONG><a name="[158]"></a>ReadFmBill</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, dwin_com_pro.o(i.ReadFmBill))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ReadFmBill &rArr; fal_partition_read &rArr; SPI_FLASH_BufferRead &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_read
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SetResendBillState
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskDwin
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_RecvRegisterAck
</UL>

<P><STRONG><a name="[1c7]"></a>Read_HLW8112_EA</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, hlw8112-spi.o(i.Read_HLW8112_EA))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = Read_HLW8112_EA &rArr; Read_HLW8112_RegData &rArr; HLW8112_SPI_ReadReg &rArr; HLW8112_SPI_WriteByte &rArr; delay_u &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HLW8112_RegData
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_WriteREG_EN
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_WriteREG_DIS
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_SPI_WriteReg
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_SPI_WriteByte
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_u
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_Measure
</UL>

<P><STRONG><a name="[1c5]"></a>Read_HLW8112_PA_I</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, hlw8112-spi.o(i.Read_HLW8112_PA_I))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = Read_HLW8112_PA_I &rArr; Read_HLW8112_RegData &rArr; HLW8112_SPI_ReadReg &rArr; HLW8112_SPI_WriteByte &rArr; delay_u &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HLW8112_RegData
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_Measure
</UL>

<P><STRONG><a name="[1c4]"></a>Read_HLW8112_RegData</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, hlw8112-spi.o(i.Read_HLW8112_RegData))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = Read_HLW8112_RegData &rArr; HLW8112_SPI_ReadReg &rArr; HLW8112_SPI_WriteByte &rArr; delay_u &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_SPI_ReadReg
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_SPI_ReadByte
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_u
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_HLW8112
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_underVoltage
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_V_Zero
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HLW8112_U
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HLW8112_PA_I
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HLW8112_EA
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_CheckSum_HLW8112_Calfactor
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_Measure
</UL>

<P><STRONG><a name="[1c6]"></a>Read_HLW8112_U</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, hlw8112-spi.o(i.Read_HLW8112_U))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = Read_HLW8112_U &rArr; Read_HLW8112_RegData &rArr; HLW8112_SPI_ReadReg &rArr; HLW8112_SPI_WriteByte &rArr; delay_u &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HLW8112_RegData
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_Measure
</UL>

<P><STRONG><a name="[ff]"></a>Recordqueryinfo_WR</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, dwin_com_pro.o(i.Recordqueryinfo_WR))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Recordqueryinfo_WR &rArr; fal_partition_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_read
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_settlementrecord
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_Transactionrecord
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPTransactionrecord
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startchargUnlock
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_settlement
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SelectUpNChargeRecode
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SelectNextNChargeRecode
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SelectCurChargeRecode
</UL>

<P><STRONG><a name="[18b]"></a>SIM7600CloseNet</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, modulea7680c.o(i.SIM7600CloseNet))
<BR><BR>[Stack]<UL><LI>Max Depth = 252 + Unknown Stack Size
<LI>Call Chain = SIM7600CloseNet &rArr; Send_AT_CIPCLOSE &rArr; UART_4GWrite &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CIPCLOSE
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Connect_4G
</UL>

<P><STRONG><a name="[188]"></a>SIM7600Reset</STRONG> (Thumb, 266 bytes, Stack size 8 bytes, modulea7680c.o(i.SIM7600Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 252 + Unknown Stack Size
<LI>Call Chain = SIM7600Reset &rArr; Send_AT_CIPCLOSE &rArr; UART_4GWrite &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemReset
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_NETCLOSE
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CIPCLOSE
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Connect_4G
</UL>

<P><STRONG><a name="[123]"></a>SIM7600_RecvDesposeCmd</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, modulea7680c.o(i.SIM7600_RecvDesposeCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SIM7600_RecvDesposeCmd &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask4GRecv
</UL>

<P><STRONG><a name="[27f]"></a>SPI_FLASH_BufferRead</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, spi_flash.o(i.SPI_FLASH_BufferRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_FLASH_BufferRead &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_read
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferWrite
</UL>

<P><STRONG><a name="[282]"></a>SPI_FLASH_BufferWrite</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, spi_flash.o(i.SPI_FLASH_BufferWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SectorErase
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PageWrite
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferRead
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
</UL>

<P><STRONG><a name="[1b7]"></a>SPI_FLASH_Detect</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, spi_flash.o(i.SPI_FLASH_Detect))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Init
</UL>

<P><STRONG><a name="[284]"></a>SPI_FLASH_PageWrite</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, spi_flash.o(i.SPI_FLASH_PageWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteDisable
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferWrite
</UL>

<P><STRONG><a name="[281]"></a>SPI_FLASH_ReadByte</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, spi_flash.o(i.SPI_FLASH_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_FLASH_ReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadID
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferRead
</UL>

<P><STRONG><a name="[1b8]"></a>SPI_FLASH_ReadID</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, spi_flash.o(i.SPI_FLASH_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_FLASH_ReadID &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Init
</UL>

<P><STRONG><a name="[283]"></a>SPI_FLASH_SectorErase</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, spi_flash.o(i.SPI_FLASH_SectorErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_FLASH_SectorErase &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteDisable
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferWrite
</UL>

<P><STRONG><a name="[280]"></a>SPI_FLASH_SendByte</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, spi_flash.o(i.SPI_FLASH_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteStatus
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteDisable
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SectorErase
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadID
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PageWrite
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferWrite
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferRead
</UL>

<P><STRONG><a name="[285]"></a>SPI_FLASH_WaitForWriteEnd</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, spi_flash.o(i.SPI_FLASH_WaitForWriteEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteStatus
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SectorErase
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PageWrite
</UL>

<P><STRONG><a name="[1b5]"></a>SPI_FLASH_WriteDisable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, spi_flash.o(i.SPI_FLASH_WriteDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_FLASH_WriteDisable &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Init
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteStatus
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SectorErase
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PageWrite
</UL>

<P><STRONG><a name="[1b4]"></a>SPI_FLASH_WriteEnable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, spi_flash.o(i.SPI_FLASH_WriteEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_FLASH_WriteEnable &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Init
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteStatus
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SectorErase
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PageWrite
</UL>

<P><STRONG><a name="[1b6]"></a>SPI_FLASH_WriteStatus</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, spi_flash.o(i.SPI_FLASH_WriteStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_FLASH_WriteStatus &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteDisable
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Init
</UL>

<P><STRONG><a name="[11e]"></a>Send_AT_CIPMODE</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, modulea7680c.o(i.Send_AT_CIPMODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = Send_AT_CIPMODE &rArr; UART_4GWrite &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_4GWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask4GMain
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_SIM7600Test
</UL>

<P><STRONG><a name="[13b]"></a>Send_AT_CIPRXGET</STRONG> (Thumb, 82 bytes, Stack size 80 bytes, modulea7680c.o(i.Send_AT_CIPRXGET))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = Send_AT_CIPRXGET &rArr; UART_4GWrite &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_4GWrite
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask4GSend
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_ActRecv1_Ack
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_ActRecv0_Ack
</UL>

<P><STRONG><a name="[13e]"></a>Send_AT_CSQ</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, modulea7680c.o(i.Send_AT_CSQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = Send_AT_CSQ &rArr; UART_4GWrite &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_4GWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask4GSend
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_SIM7600Test
</UL>

<P><STRONG><a name="[190]"></a>SetVariColor</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, dwinprotocol.o(i.SetVariColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = SetVariColor &rArr; LCD_SendToUart &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendTwoBytes
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendToUart
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendByteToBuf
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwin_FrameHead
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_ShowTime
</UL>

<P><STRONG><a name="[1ed]"></a>Set_V_Zero</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, hlw8112-spi.o(i.Set_V_Zero))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = Set_V_Zero &rArr; Read_HLW8112_RegData &rArr; HLW8112_SPI_ReadReg &rArr; HLW8112_SPI_WriteByte &rArr; delay_u &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HLW8112_RegData
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_WriteREG_EN
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_WriteREG_DIS
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_SPI_WriteReg
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_SPI_WriteByte
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_u
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_HLW8112
</UL>

<P><STRONG><a name="[28a]"></a>Set_judge_rete_info</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, dwin_com_pro.o(i.Set_judge_rete_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Set_judge_rete_info &rArr; fal_partition_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slotcard_state
</UL>

<P><STRONG><a name="[1ee]"></a>Set_underVoltage</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, hlw8112-spi.o(i.Set_underVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = Set_underVoltage &rArr; Read_HLW8112_RegData &rArr; HLW8112_SPI_ReadReg &rArr; HLW8112_SPI_WriteByte &rArr; delay_u &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HLW8112_RegData
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_WriteREG_EN
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_WriteREG_DIS
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_SPI_WriteReg
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_SPI_WriteByte
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_u
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_HLW8112
</UL>

<P><STRONG><a name="[16b]"></a>Spi_Flash_Io_Init</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, spi_flash.o(i.Spi_Flash_Io_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Spi_Flash_Io_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[15e]"></a>StoreRecodeCurNum</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dwin_com_pro.o(i.StoreRecodeCurNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = StoreRecodeCurNum &rArr; fal_partition_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskDwin
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_change_card
</UL>

<P><STRONG><a name="[f9]"></a>StrToHex</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, dwin_com_pro.o(i.StrToHex))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = StrToHex
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPTransactionrecord
</UL>

<P><STRONG><a name="[1e2]"></a>String2Hex</STRONG> (Thumb, 102 bytes, Stack size 28 bytes, hyframe.o(i.String2Hex))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = String2Hex
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Char2Hex
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendRegister
</UL>

<P><STRONG><a name="[17c]"></a>Swap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cp.o(i.Swap))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BubbleSort
</UL>

<P><STRONG><a name="[2e1]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(i.SysTick_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[59]"></a>SysTick_Handler</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, delay.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; uart_recvdispose &rArr; mq_service_dwinrecv_send_disp &rArr; mq_service_send_msg &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_recvdispose
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415cbt7.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>SystemInit</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, system_at32f4xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo144M &rArr; RCC_PLLFrefTableConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415cbt7.o(.text)
</UL>
<P><STRONG><a name="[119]"></a>SystemReset</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, device.o(i.SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask4GMain
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_standy_proc
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM7600Reset
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent14
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent13
</UL>

<P><STRONG><a name="[28e]"></a>TIM2_PWM_Conrtol</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, timer.o(i.TIM2_PWM_Conrtol))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM2_PWM_Conrtol &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_TimeBaseStructInit
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_TimeBaseInit
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_OCStructInit
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_OC2PreloadConfig
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_OC2Init
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cp_pwm_full
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cp_pwm_ch_puls
</UL>

<P><STRONG><a name="[170]"></a>TIM3_Int_Init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, timer.o(i.TIM3_Int_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM3_Int_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[172]"></a>TIM4_Int_Init</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, timer.o(i.TIM4_Int_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM4_Int_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[77]"></a>TMR3_GLOBAL_IRQHandler</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, timer.o(i.TMR3_GLOBAL_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TMR3_GLOBAL_IRQHandler &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415cbt7.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>TMR4_GLOBAL_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, timer.o(i.TMR4_GLOBAL_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415cbt7.o(RESET)
</UL>
<P><STRONG><a name="[294]"></a>TMR_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, at32f4xx_tim.o(i.TMR_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_PWM_Conrtol
</UL>

<P><STRONG><a name="[292]"></a>TMR_OC2Init</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, at32f4xx_tim.o(i.TMR_OC2Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMR_OC2Init
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_PWM_Conrtol
</UL>

<P><STRONG><a name="[293]"></a>TMR_OC2PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, at32f4xx_tim.o(i.TMR_OC2PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_PWM_Conrtol
</UL>

<P><STRONG><a name="[291]"></a>TMR_OCStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, at32f4xx_tim.o(i.TMR_OCStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_PWM_Conrtol
</UL>

<P><STRONG><a name="[290]"></a>TMR_TimeBaseInit</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, at32f4xx_tim.o(i.TMR_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_PWM_Conrtol
</UL>

<P><STRONG><a name="[28f]"></a>TMR_TimeBaseStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32f4xx_tim.o(i.TMR_TimeBaseStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_PWM_Conrtol
</UL>

<P><STRONG><a name="[120]"></a>UART14Ginit</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, uart1.o(i.UART14Ginit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = UART14Ginit &rArr; USART_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_INTConfig
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask4GRecv
</UL>

<P><STRONG><a name="[1f9]"></a>UART1SENDBUF</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, uart1.o(i.UART1SENDBUF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART1SENDBUF
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleSIM7600_SendData
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_4GWrite
</UL>

<P><STRONG><a name="[298]"></a>UART1SendByte</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uart1.o(i.UART1SendByte))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1SENDBUF
</UL>

<P><STRONG><a name="[156]"></a>UART2Dispinit</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, uart2.o(i.UART2Dispinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = UART2Dispinit &rArr; USART_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_INTConfig
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskDwin
</UL>

<P><STRONG><a name="[1f0]"></a>UART2SENDBUF</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, uart2.o(i.UART2SENDBUF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART2SENDBUF
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendToUart
</UL>

<P><STRONG><a name="[299]"></a>UART2SendByte</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uart2.o(i.UART2SendByte))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2SENDBUF
</UL>

<P><STRONG><a name="[29a]"></a>UART3SENDBUF</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, 485_1.o(i.UART3SENDBUF))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = UART3SENDBUF &rArr; delay_u &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_u
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_485send
</UL>

<P><STRONG><a name="[29b]"></a>UART3SendByte</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, 485_1.o(i.UART3SendByte))
<BR><BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3SENDBUF
</UL>

<P><STRONG><a name="[176]"></a>UART3init</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, 485_1.o(i.UART3init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = UART3init &rArr; USART_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_INTConfig
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskdlt645
</UL>

<P><STRONG><a name="[1fa]"></a>UART_4GWrite</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, 4gmain.o(i.UART_4GWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + Unknown Stack Size
<LI>Call Chain = UART_4GWrite &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1SENDBUF
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_SetCIPRXGET
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_READ
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_NOTCIPMODE
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_NETOPEN
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_NETCLOSE
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_HTTPTERM
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_HTTPPAR
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_HTTPINIT
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_GET
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_EnterATCmd
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CIPCLOSE
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CIMI
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CGDCONT
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_EnterATCmd_Ack
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_ConnectServer
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CSQ
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CIPRXGET
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CIPMODE
</UL>

<P><STRONG><a name="[7f]"></a>USART1_IRQHandler</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, uart1.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = USART1_IRQHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_RecvDispose
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415cbt7.o(RESET)
</UL>
<P><STRONG><a name="[29f]"></a>USART1_RecvDispose</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, uart1.o(i.USART1_RecvDispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = USART1_RecvDispose &rArr; OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[80]"></a>USART2_IRQHandler</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, uart2.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = USART2_IRQHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_RecvDispose
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415cbt7.o(RESET)
</UL>
<P><STRONG><a name="[2a0]"></a>USART2_RecvDispose</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, uart2.o(i.USART2_RecvDispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = USART2_RecvDispose &rArr; OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[177]"></a>USART3_485send</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, dlt645_port.o(i.USART3_485send))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = USART3_485send &rArr; UART3SENDBUF &rArr; delay_u &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3SENDBUF
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskdlt645
</UL>

<P><STRONG><a name="[81]"></a>USART3_IRQHandler</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, 485_1.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = USART3_IRQHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_RecvDispose
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415cbt7.o(RESET)
</UL>
<P><STRONG><a name="[2a1]"></a>USART3_RecvDispose</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, 485_1.o(i.USART3_RecvDispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = USART3_RecvDispose &rArr; OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[29d]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, at32f4xx_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[297]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, at32f4xx_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2Dispinit
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART14Ginit
</UL>

<P><STRONG><a name="[29c]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, at32f4xx_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[296]"></a>USART_INTConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, at32f4xx_usart.o(i.USART_INTConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_INTConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2Dispinit
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART14Ginit
</UL>

<P><STRONG><a name="[295]"></a>USART_Init</STRONG> (Thumb, 226 bytes, Stack size 72 bytes, at32f4xx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USART_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2Dispinit
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART14Ginit
</UL>

<P><STRONG><a name="[29e]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f4xx_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[2a2]"></a>Unlock_Transactionrecord</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, dwin_com_pro.o(i.Unlock_Transactionrecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Unlock_Transactionrecord &rArr; Recordqueryinfo_WR &rArr; fal_partition_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recordqueryinfo_WR
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_ShowCopy
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startchargUnlock
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_settlement
</UL>

<P><STRONG><a name="[2a3]"></a>Unlock_settlement</STRONG> (Thumb, 392 bytes, Stack size 32 bytes, read_nuid.o(i.Unlock_settlement))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = Unlock_settlement &rArr; read_card_money &rArr; RC522_ReadCard &rArr; RC522_PcdAuthState &rArr; RC522_PcdComMF522 &rArr; RC522_SetBitMask &rArr; RC522_WriteRawRC &rArr; RC522_ReadWriteByte &rArr; delay_u &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_settlementrecord
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_Transactionrecord
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recordqueryinfo_WR
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_PcdValue
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_ShowCopy
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writer_lock_state
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_lock_state
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_card_money
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_read_nuid
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slotcard_state
</UL>

<P><STRONG><a name="[2a7]"></a>Unlock_settlementrecord</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, dwin_com_pro.o(i.Unlock_settlementrecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Unlock_settlementrecord &rArr; Recordqueryinfo_WR &rArr; fal_partition_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recordqueryinfo_WR
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_ShowCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_change_card
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startchargUnlock
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_settlement
</UL>

<P><STRONG><a name="[55]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32f4xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f415cbt7.o(RESET)
</UL>
<P><STRONG><a name="[12c]"></a>WriterFmBill</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, dwin_com_pro.o(i.WriterFmBill))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = WriterFmBill &rArr; fal_partition_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pre4GBill
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskDwin
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask4GSend
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_RecvRecordAck
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendBill
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period_WriterFmBill
</UL>

<P><STRONG><a name="[130]"></a>ZF_SendBill</STRONG> (Thumb, 610 bytes, Stack size 112 bytes, zfframe.o(i.ZF_SendBill))
<BR><BR>[Stack]<UL><LI>Max Depth = 316 + Unknown Stack Size
<LI>Call Chain = ZF_SendBill &rArr; ModuleSIM7600_SendData &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleSIM7600_SendData
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetAppRegisterState
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask4GSend
</UL>

<P><STRONG><a name="[13d]"></a>ZF_SendFrameDispose</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, zfframe.o(i.ZF_SendFrameDispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = ZF_SendFrameDispose &rArr; OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask4GSend
</UL>

<P><STRONG><a name="[12a]"></a>ZF_SendStartCharge</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, zfframe.o(i.ZF_SendStartCharge))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = ZF_SendStartCharge &rArr; ModuleSIM7600_SendData &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleSIM7600_SendData
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetAppRegisterState
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask4GSend
</UL>

<P><STRONG><a name="[fb]"></a>_4G_GetStartType</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, 4gmain.o(i._4G_GetStartType))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _4G_GetStartType
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetHYStartType
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCard
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_stp
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPTransactionrecord
</UL>

<P><STRONG><a name="[124]"></a>_4G_RecvFrameDispose</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, 4gmain.o(i._4G_RecvFrameDispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _4G_RecvFrameDispose &rArr; HY_RecvFrameDispose &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_RecvFrameDispose
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask4GRecv
</UL>

<P><STRONG><a name="[12e]"></a>_4G_SendBill</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, 4gmain.o(i._4G_SendBill))
<BR><BR>[Stack]<UL><LI>Max Depth = 564 + Unknown Stack Size
<LI>Call Chain = _4G_SendBill &rArr; HY_SendBill &rArr; HYFreamSend &rArr; ModuleSIM7600_SendData &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendBill
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask4GSend
</UL>

<P><STRONG><a name="[139]"></a>_4G_SendCardInfo</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, 4gmain.o(i._4G_SendCardInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 756 + Unknown Stack Size
<LI>Call Chain = _4G_SendCardInfo &rArr; HY_SendCardInfo &rArr; HYFreamSend &rArr; ModuleSIM7600_SendData &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendCardInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask4GSend
</UL>

<P><STRONG><a name="[138]"></a>_4G_SendCardVinCharge</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, 4gmain.o(i._4G_SendCardVinCharge))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask4GSend
</UL>

<P><STRONG><a name="[131]"></a>_4G_SendDevState</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, 4gmain.o(i._4G_SendDevState))
<BR><BR>[Stack]<UL><LI>Max Depth = 556 + Unknown Stack Size
<LI>Call Chain = _4G_SendDevState &rArr; HY_SendDevStateA &rArr; HYFreamSend &rArr; ModuleSIM7600_SendData &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendDevStateA
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask4GSend
</UL>

<P><STRONG><a name="[13c]"></a>_4G_SendFrameDispose</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, 4gmain.o(i._4G_SendFrameDispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = _4G_SendFrameDispose &rArr; HY_SendFrameDispose &rArr; OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendFrameDispose
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask4GSend
</UL>

<P><STRONG><a name="[134]"></a>_4G_SendQueryRate</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, 4gmain.o(i._4G_SendQueryRate))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask4GSend
</UL>

<P><STRONG><a name="[133]"></a>_4G_SendRateAck</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, 4gmain.o(i._4G_SendRateAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 548 + Unknown Stack Size
<LI>Call Chain = _4G_SendRateAck &rArr; HY_SendRateAck &rArr; HYFreamSend &rArr; ModuleSIM7600_SendData &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendRateAck
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask4GSend
</UL>

<P><STRONG><a name="[135]"></a>_4G_SendRateMode</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, 4gmain.o(i._4G_SendRateMode))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask4GSend
</UL>

<P><STRONG><a name="[137]"></a>_4G_SendSetTimeAck</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, 4gmain.o(i._4G_SendSetTimeAck))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask4GSend
</UL>

<P><STRONG><a name="[129]"></a>_4G_SendStartAck</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, 4gmain.o(i._4G_SendStartAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 556 + Unknown Stack Size
<LI>Call Chain = _4G_SendStartAck &rArr; HY_SendStartAck &rArr; HYFreamSend &rArr; ModuleSIM7600_SendData &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendStartAck
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask4GSend
</UL>

<P><STRONG><a name="[12b]"></a>_4G_SendStopAck</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, 4gmain.o(i._4G_SendStopAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 556 + Unknown Stack Size
<LI>Call Chain = _4G_SendStopAck &rArr; HY_SendStopAck &rArr; HYFreamSend &rArr; ModuleSIM7600_SendData &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendStopAck
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask4GSend
</UL>

<P><STRONG><a name="[13a]"></a>_4G_SendVinInfo</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, 4gmain.o(i._4G_SendVinInfo))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask4GSend
</UL>

<P><STRONG><a name="[12f]"></a>_4G_SetStartType</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, 4gmain.o(i._4G_SetStartType))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _4G_SetStartType
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SetHYStartType
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask4GSend
</UL>

<P><STRONG><a name="[15b]"></a>_HY_RestUpdataData</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hyframe.o(i._HY_RestUpdataData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _HY_RestUpdataData
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetBillInfo
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskDwin
</UL>

<P><STRONG><a name="[269]"></a>_RC522_delay_ns</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rc522.o(i._RC522_delay_ns))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_M500PcdConfigISOType
</UL>

<P><STRONG><a name="[2aa]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[30e]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[fd]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ertc
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskdlt645
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskDwin
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask4GSend
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask4GRecv
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERTC_Config
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_CheckSum_HLW8112_Calfactor
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_Measure
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_task_init
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_msg_proc
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_q_money
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_stp
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_charging
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_READ
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_HTTPPAR
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CIPCLOSE
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_ConnectServer
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFmBill
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleSIM7600_SendData
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_RecvUpdata
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CIPRXGET
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM7600Reset
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_SIM7600Test
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_HTTPDownload
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleSIM7600_ConnectServer
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_RecvFrameDispose
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPTransactionrecord
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rest_charge_dispose
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_para_init
</UL>

<P><STRONG><a name="[2ac]"></a>__0snprintf$8</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, printf8.o(i.__0snprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[30f]"></a>__1snprintf$8</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printf8.o(i.__0snprintf$8), UNUSED)

<P><STRONG><a name="[fc]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printf8.o(i.__0snprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_READ
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_HTTPPAR
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CIPCLOSE
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_ConnectServer
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleSIM7600_SendData
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_RecvUpdata
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CIPRXGET
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPTransactionrecord
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_ShowTime
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_SYSShowTime
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_show_state
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_IP4Sert
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_IP3Sert
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_IP2Sert
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_IP1Sert
</UL>

<P><STRONG><a name="[de]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[310]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[311]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[312]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[313]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[14c]"></a>adc_init</STRONG> (Thumb, 212 bytes, Stack size 8 bytes, adc.o(i.adc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = adc_init &rArr; GPIO_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Reset
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DefaultInitParaConfig
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ChannelEnable
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StructInit
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCtrl
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RstCalibration
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResetCalibrationStatus
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationStatus
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACtrl
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Ctrl
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration_
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCharge
</UL>

<P><STRONG><a name="[144]"></a>app_read_nuid</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, read_nuid.o(i.app_read_nuid))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = app_read_nuid &rArr; RC522_PcdRequest &rArr; RC522_PcdComMF522 &rArr; RC522_SetBitMask &rArr; RC522_WriteRawRC &rArr; RC522_ReadWriteByte &rArr; delay_u &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_Reset
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_PcdRequest
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_PcdAnticoll
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCard
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_change_card
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_change_card
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slotcard_state
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_settlement
</UL>

<P><STRONG><a name="[2bd]"></a>ch_charging</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, chproc.o(i.ch_charging))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = ch_charging &rArr; mq_service_ch_send_dip &rArr; mq_service_send_msg &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_ch_send_dip
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_stop_func
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_stp
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_info_update
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_loop_proc
</UL>

<P><STRONG><a name="[2c2]"></a>ch_cplt_func</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, chproc.o(i.ch_cplt_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = ch_cplt_func &rArr; electricity_err &rArr; OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;electricity_err
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_jump_new_stat
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_under_volt
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_over_volt
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_over_current
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_insert
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_fault
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_wait_stop
</UL>

<P><STRONG><a name="[2ca]"></a>ch_ctl_disable</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, chproc.o(i.ch_ctl_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = ch_ctl_disable &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_task_init
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_stop_func
</UL>

<P><STRONG><a name="[2cb]"></a>ch_ctl_enable</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, chproc.o(i.ch_ctl_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = ch_ctl_enable &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_wait_car_ready
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_start_func
</UL>

<P><STRONG><a name="[2cc]"></a>ch_cycle_get_8112</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, chtask.o(i.ch_cycle_get_8112))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = ch_cycle_get_8112 &rArr; HLW8112_Measure &rArr; Init_HLW8112 &rArr; Judge_CheckSum_HLW8112_Calfactor &rArr; Read_HLW8112_RegData &rArr; HLW8112_SPI_ReadReg &rArr; HLW8112_SPI_WriteByte &rArr; delay_u &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_Measure
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112DataDispose
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_task_cycle_proc
</UL>

<P><STRONG><a name="[2ce]"></a>ch_fault_proc</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, chproc.o(i.ch_fault_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = ch_fault_proc &rArr; ch_jump_new_stat &rArr; OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_jump_new_stat
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_under_volt
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_over_volt
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_over_current
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_loop_proc
</UL>

<P><STRONG><a name="[14f]"></a>ch_get_cp_state_info</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, chtask.o(i.ch_get_cp_state_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ch_get_cp_state_info &rArr; ch_get_cp_volt &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_get_cp_volt
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCharge
</UL>

<P><STRONG><a name="[2d0]"></a>ch_get_cp_volt</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, cp.o(i.ch_get_cp_volt))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ch_get_cp_volt &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BubbleSort
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_get_cp_state_info
</UL>

<P><STRONG><a name="[2be]"></a>ch_info_update</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, chproc.o(i.ch_info_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ch_info_update &rArr; get_q_money &rArr; time
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_q_money
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_precharge
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_charging
</UL>

<P><STRONG><a name="[2d2]"></a>ch_insert_proc</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, chproc.o(i.ch_insert_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = ch_insert_proc &rArr; mode5 &rArr; APPTransactionrecord &rArr; Recordqueryinfo_WR &rArr; fal_partition_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode5
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_Mesetelectricity
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;electricity_err
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_start_func
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_jump_new_stat
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_under_volt
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_start
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_over_volt
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_over_current
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_insert
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_fault
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_loop_proc
</UL>

<P><STRONG><a name="[185]"></a>ch_is_cp_off</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, chproc.o(i.ch_is_cp_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = ch_is_cp_off &rArr; OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_flag
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_stp
</UL>

<P><STRONG><a name="[2d6]"></a>ch_is_end_condition</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, chproc.o(i.ch_is_end_condition))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ch_is_end_condition &rArr; time
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_stp
</UL>

<P><STRONG><a name="[2c3]"></a>ch_is_fault</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, chproc.o(i.ch_is_fault))
<BR><BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_standy_proc
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_stp
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_insert_proc
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_cplt_func
</UL>

<P><STRONG><a name="[2c8]"></a>ch_is_insert</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, chproc.o(i.ch_is_insert))
<BR><BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_stop_func
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_insert_proc
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_fault_proc
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_cplt_func
</UL>

<P><STRONG><a name="[2d7]"></a>ch_is_low_current_9V</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, chproc.o(i.ch_is_low_current_9V))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = ch_is_low_current_9V &rArr; ch_is_under_cp9v &rArr; OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_under_cp9v
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_stp
</UL>

<P><STRONG><a name="[2c4]"></a>ch_is_over_current</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, chproc.o(i.ch_is_over_current))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = ch_is_over_current &rArr; OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_standy_proc
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_stp
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_insert_proc
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_fault_proc
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_cplt_func
</UL>

<P><STRONG><a name="[2c5]"></a>ch_is_over_volt</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, chproc.o(i.ch_is_over_volt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = ch_is_over_volt &rArr; OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_standy_proc
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_stp
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_insert_proc
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_fault_proc
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_cplt_func
</UL>

<P><STRONG><a name="[2d4]"></a>ch_is_start</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, chproc.o(i.ch_is_start))
<BR><BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_insert_proc
</UL>

<P><STRONG><a name="[2bf]"></a>ch_is_stp</STRONG> (Thumb, 296 bytes, Stack size 8 bytes, chproc.o(i.ch_is_stp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = ch_is_stp &rArr; ch_is_low_current_9V &rArr; ch_is_under_cp9v &rArr; OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4G_GetStartType
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;money_not_enough
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;electricity_err
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_under_volt
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_over_volt
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_over_current
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_low_current_9V
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_fault
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_end_condition
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_cp_off
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_wait_car_ready
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_charging
</UL>

<P><STRONG><a name="[2d8]"></a>ch_is_under_cp9v</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, chproc.o(i.ch_is_under_cp9v))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = ch_is_under_cp9v &rArr; OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_low_current_9V
</UL>

<P><STRONG><a name="[2c6]"></a>ch_is_under_volt</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, chproc.o(i.ch_is_under_volt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = ch_is_under_volt &rArr; OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_standy_proc
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_stp
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_insert_proc
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_fault_proc
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_cplt_func
</UL>

<P><STRONG><a name="[2c9]"></a>ch_jump_new_stat</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, chproc.o(i.ch_jump_new_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = ch_jump_new_stat &rArr; OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_wait_car_ready
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_stop_func
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_start_func
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_standy_proc
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_precharge
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_insert_proc
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_fault_proc
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_cplt_func
</UL>

<P><STRONG><a name="[152]"></a>ch_loop_proc</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, chproc.o(i.ch_loop_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = ch_loop_proc &rArr; ch_wait_car_ready &rArr; mq_service_ch_send_dip &rArr; mq_service_send_msg &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_wait_stop
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_wait_car_ready
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_standy_proc
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_precharge
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_insert_proc
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_fault_proc
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_charging
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCharge
</UL>

<P><STRONG><a name="[2dc]"></a>ch_precharge</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, chproc.o(i.ch_precharge))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = ch_precharge &rArr; mq_service_ch_send_dip &rArr; mq_service_send_msg &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_ch_send_dip
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_jump_new_stat
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_info_update
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_loop_proc
</UL>

<P><STRONG><a name="[2da]"></a>ch_standy_proc</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, chproc.o(i.ch_standy_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = ch_standy_proc &rArr; electricity_err &rArr; OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemReset
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;electricity_err
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_jump_new_stat
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_under_volt
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_over_volt
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_over_current
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_fault
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_loop_proc
</UL>

<P><STRONG><a name="[2d5]"></a>ch_start_func</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, chproc.o(i.ch_start_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = ch_start_func &rArr; ch_ctl_enable &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cp_pwm_ch_puls
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_jump_new_stat
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_ctl_enable
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_insert_proc
</UL>

<P><STRONG><a name="[2c0]"></a>ch_stop_func</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, chproc.o(i.ch_stop_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = ch_stop_func &rArr; ch_ctl_disable &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cp_pwm_full
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_jump_new_stat
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_insert
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_ctl_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_wait_car_ready
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_charging
</UL>

<P><STRONG><a name="[151]"></a>ch_task_cycle_proc</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, chtask.o(i.ch_task_cycle_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = ch_task_cycle_proc &rArr; ch_cycle_get_8112 &rArr; HLW8112_Measure &rArr; Init_HLW8112 &rArr; Judge_CheckSum_HLW8112_Calfactor &rArr; Read_HLW8112_RegData &rArr; HLW8112_SPI_ReadReg &rArr; HLW8112_SPI_WriteByte &rArr; delay_u &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_cycle_get_8112
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCharge
</UL>

<P><STRONG><a name="[14a]"></a>ch_task_init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, chtask.o(i.ch_task_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = ch_task_init &rArr; ch_ctl_disable &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_ctl_disable
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCharge
</UL>

<P><STRONG><a name="[2df]"></a>ch_task_tcu_msg_proc</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, chtask.o(i.ch_task_tcu_msg_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = ch_task_tcu_msg_proc &rArr; ch_from_ctl_msg &rArr; mq_service_ch_send_dip &rArr; mq_service_send_msg &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_from_ctl_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_msg_proc
</UL>

<P><STRONG><a name="[2db]"></a>ch_wait_car_ready</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, chproc.o(i.ch_wait_car_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = ch_wait_car_ready &rArr; mq_service_ch_send_dip &rArr; mq_service_send_msg &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_ch_send_dip
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_stop_func
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_jump_new_stat
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_stp
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_ctl_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_loop_proc
</UL>

<P><STRONG><a name="[2dd]"></a>ch_wait_stop</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, chproc.o(i.ch_wait_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = ch_wait_stop &rArr; ch_cplt_func &rArr; electricity_err &rArr; OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_cplt_func
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_loop_proc
</UL>

<P><STRONG><a name="[2e0]"></a>cp_pwm_ch_puls</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, chproc.o(i.cp_pwm_ch_puls))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cp_pwm_ch_puls &rArr; TIM2_PWM_Conrtol &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_PWM_Conrtol
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_start_func
</UL>

<P><STRONG><a name="[14b]"></a>cp_pwm_full</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, chproc.o(i.cp_pwm_full))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cp_pwm_full &rArr; TIM2_PWM_Conrtol &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_PWM_Conrtol
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCharge
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_stop_func
</UL>

<P><STRONG><a name="[16e]"></a>delay_init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, delay.o(i.delay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[1ea]"></a>delay_m</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, delay.o(i.delay_m))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = delay_m &rArr; delay_ostimedly &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ostimedly
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_u
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_HLW8112
</UL>

<P><STRONG><a name="[2e3]"></a>delay_osschedlock</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, delay.o(i.delay_osschedlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = delay_osschedlock &rArr; OSSchedLock &rArr; OS_SchedLockTimeMeasStart
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_u
</UL>

<P><STRONG><a name="[2e4]"></a>delay_osschedunlock</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, delay.o(i.delay_osschedunlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_u
</UL>

<P><STRONG><a name="[2e2]"></a>delay_ostimedly</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, delay.o(i.delay_ostimedly))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = delay_ostimedly &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_m
</UL>

<P><STRONG><a name="[1c9]"></a>delay_u</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, delay.o(i.delay_u))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = delay_u &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_osschedunlock
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_osschedlock
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_HLW8112
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_underVoltage
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_V_Zero
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HLW8112_RegData
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HLW8112_EA
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_WriteREG_EN
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_WriteREG_DIS
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_SPI_WriteByte
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_SPI_ReadByte
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_m
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3SENDBUF
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_ReadWriteByte
</UL>

<P><STRONG><a name="[2c7]"></a>electricity_err</STRONG> (Thumb, 262 bytes, Stack size 16 bytes, chproc.o(i.electricity_err))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = electricity_err &rArr; OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_standy_proc
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_stp
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_insert_proc
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_cplt_func
</UL>

<P><STRONG><a name="[16d]"></a>ertc</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, ertc.o(i.ertc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ertc &rArr; ERTC_TimeRegulate &rArr; ERTC_SetTimeValue &rArr; ERTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERTC_TimeShow
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERTC_WaitForSynchro
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERTC_ReadBackupRegister
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCtrl
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERTC_TimeStampConfig
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERTC_TimeRegulate
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERTC_Config
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[1e5]"></a>fal_partition_read</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, flashdispos.o(i.fal_partition_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = fal_partition_read &rArr; SPI_FLASH_BufferRead &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferRead
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFmBill
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recordqueryinfo_WR
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rest_charge_dispose
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_para_init
</UL>

<P><STRONG><a name="[15d]"></a>fal_partition_write</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, flashdispos.o(i.fal_partition_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = fal_partition_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskDwin
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_RecvRateSet
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriterFmBill
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_HTTPDownload
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreRecodeCurNum
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_judge_rete_info
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recordqueryinfo_WR
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_reset_curcharge
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;passwordmodify
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_para_init
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period_WriterFmBill
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_PortSert
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_IP4Sert
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_IP3Sert
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_IP2Sert
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_IP1Sert
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_DevnumDispose
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Company_code
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_ShowSysInfo
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_record
</UL>

<P><STRONG><a name="[a0]"></a>fputc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at32_board.o(i.fputc))
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[2d1]"></a>get_q_money</STRONG> (Thumb, 414 bytes, Stack size 56 bytes, chproc.o(i.get_q_money))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = get_q_money &rArr; time
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_adduseelectricity
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_info_update
</UL>

<P><STRONG><a name="[165]"></a>get_reset_curcharge</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, dwin_com_pro.o(i.get_reset_curcharge))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = get_reset_curcharge &rArr; fal_partition_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskDwin
</UL>

<P><STRONG><a name="[90]"></a>main</STRONG> (Thumb, 70 bytes, Stack size 48 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = main &rArr; OSInit &rArr; OS_TmrInit &rArr; OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[2d3]"></a>mode5</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, read_nuid.o(i.mode5))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = mode5 &rArr; APPTransactionrecord &rArr; Recordqueryinfo_WR &rArr; fal_partition_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPTransactionrecord
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_insert_proc
</UL>

<P><STRONG><a name="[2d9]"></a>money_not_enough</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, chproc.o(i.money_not_enough))
<BR><BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_stp
</UL>

<P><STRONG><a name="[2e9]"></a>mq_service_485Uart_send_recv</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, mq_service.o(i.mq_service_485Uart_send_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = mq_service_485Uart_send_recv &rArr; mq_service_send_msg &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_send_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_recvdispose
</UL>

<P><STRONG><a name="[2eb]"></a>mq_service_4GUart_send_recv</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, mq_service.o(i.mq_service_4GUart_send_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = mq_service_4GUart_send_recv &rArr; mq_service_send_msg &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_send_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_recvdispose
</UL>

<P><STRONG><a name="[148]"></a>mq_service_card_send_disp</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, mq_service.o(i.mq_service_card_send_disp))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = mq_service_card_send_disp &rArr; mq_service_send_msg &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_send_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCard
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_change_card
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startchargUnlock
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_change_card
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slotcard_state
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_Notcalculated
</UL>

<P><STRONG><a name="[2c1]"></a>mq_service_ch_send_dip</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, mq_service.o(i.mq_service_ch_send_dip))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = mq_service_ch_send_dip &rArr; mq_service_send_msg &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_send_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_from_ctl_msg
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_wait_car_ready
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_precharge
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_charging
</UL>

<P><STRONG><a name="[2ec]"></a>mq_service_dwinrecv_send_disp</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, mq_service.o(i.mq_service_dwinrecv_send_disp))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = mq_service_dwinrecv_send_disp &rArr; mq_service_send_msg &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_send_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_recvdispose
</UL>

<P><STRONG><a name="[2ed]"></a>mq_service_moduleid_exist</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, mq_service.o(i.mq_service_moduleid_exist))
<BR><BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_send_msg
</UL>

<P><STRONG><a name="[122]"></a>mq_service_recv_msg</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, mq_service.o(i.mq_service_recv_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = mq_service_recv_msg &rArr; OSQPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskdlt645
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskDwin
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask4GSend
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask4GRecv
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_wait_msg
</UL>

<P><STRONG><a name="[2ea]"></a>mq_service_send_msg</STRONG> (Thumb, 492 bytes, Stack size 40 bytes, mq_service.o(i.mq_service_send_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = mq_service_send_msg &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_moduleid_exist
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_dwinrecv_send_disp
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_4GUart_send_recv
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_485Uart_send_recv
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_xxx_send_msg_to_chtask
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_send_to_4gsend
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_card_send_disp
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_ch_send_dip
</UL>

<P><STRONG><a name="[126]"></a>mq_service_send_to_4gsend</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, mq_service.o(i.mq_service_send_to_4gsend))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = mq_service_send_to_4gsend &rArr; mq_service_send_msg &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_send_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskDwin
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCard
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask4GRecv
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_RecvStopCharge
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_RecvStartCharge
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_RecvRateSet
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_RecvQueryRate
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_RecvQueryBill
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_RecvDevInfoAck
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dwin_state_dispose
</UL>

<P><STRONG><a name="[2ee]"></a>mq_service_xxx_send_msg_to_chtask</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, mq_service.o(i.mq_service_xxx_send_msg_to_chtask))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = mq_service_xxx_send_msg_to_chtask &rArr; mq_service_send_msg &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_send_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ch_ctl_msg
</UL>

<P><STRONG><a name="[2a5]"></a>read_card_money</STRONG> (Thumb, 246 bytes, Stack size 48 bytes, read_nuid.o(i.read_card_money))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = read_card_money &rArr; RC522_ReadCard &rArr; RC522_PcdAuthState &rArr; RC522_PcdComMF522 &rArr; RC522_SetBitMask &rArr; RC522_WriteRawRC &rArr; RC522_ReadWriteByte &rArr; delay_u &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_ReadCard
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_change_card
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startchargUnlock
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_change_card
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slotcard_state
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_settlement
</UL>

<P><STRONG><a name="[2ef]"></a>read_card_type</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, read_nuid.o(i.read_card_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = read_card_type &rArr; RC522_ReadCard &rArr; RC522_PcdAuthState &rArr; RC522_PcdComMF522 &rArr; RC522_SetBitMask &rArr; RC522_WriteRawRC &rArr; RC522_ReadWriteByte &rArr; delay_u &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_ReadCard
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_change_card
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_change_card
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slotcard_state
</UL>

<P><STRONG><a name="[2a4]"></a>read_lock_state</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, read_nuid.o(i.read_lock_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = read_lock_state &rArr; RC522_ReadCard &rArr; RC522_PcdAuthState &rArr; RC522_PcdComMF522 &rArr; RC522_SetBitMask &rArr; RC522_WriteRawRC &rArr; RC522_ReadWriteByte &rArr; delay_u &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_ReadCard
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_change_card
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_settlement
</UL>

<P><STRONG><a name="[159]"></a>rest_charge_dispose</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, dwin_com_pro.o(i.rest_charge_dispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = rest_charge_dispose &rArr; send_ch_ctl_msg &rArr; mq_service_xxx_send_msg_to_chtask &rArr; mq_service_send_msg &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_read
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ch_ctl_msg
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SetResetStartType
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SetResendBillState
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskDwin
</UL>

<P><STRONG><a name="[164]"></a>rt_dwin_period_entry</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, dwin_com_pro.o(i.rt_dwin_period_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = rt_dwin_period_entry &rArr; Period_WriterFmBill &rArr; APPTransactionrecord &rArr; Recordqueryinfo_WR &rArr; fal_partition_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period_WriterFmBill
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskDwin
</UL>

<P><STRONG><a name="[161]"></a>rt_dwin_state_dispose</STRONG> (Thumb, 528 bytes, Stack size 16 bytes, dwin_com_pro.o(i.rt_dwin_state_dispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = rt_dwin_state_dispose &rArr; mq_service_send_to_4gsend &rArr; mq_service_send_msg &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_send_to_4gsend
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetSIM7600Status
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetModuleConnectState
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurMenu
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskDwin
</UL>

<P><STRONG><a name="[147]"></a>send_ch_ctl_msg</STRONG> (Thumb, 66 bytes, Stack size 64 bytes, dwin_com_pro.o(i.send_ch_ctl_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = send_ch_ctl_msg &rArr; mq_service_xxx_send_msg_to_chtask &rArr; mq_service_send_msg &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_xxx_send_msg_to_chtask
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCard
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_RecvStopCharge
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_RecvStartCharge
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_change_card
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_change_card
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rest_charge_dispose
</UL>

<P><STRONG><a name="[2f0]"></a>set_CardMCUID</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, read_nuid.o(i.set_CardMCUID))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = set_CardMCUID &rArr; RC522_WriteCard &rArr; RC522_PcdAuthState &rArr; RC522_PcdComMF522 &rArr; RC522_SetBitMask &rArr; RC522_WriteRawRC &rArr; RC522_ReadWriteByte &rArr; delay_u &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_WriteCard
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_change_card
</UL>

<P><STRONG><a name="[1d8]"></a>set_date</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ertc.o(i.set_date))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = set_date &rArr; ERTC_SetDateValue &rArr; ERTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERTC_WriteBackupRegister
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERTC_SetDateValue
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAHEXtoBCD
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_RecvRegisterAck
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeSert
</UL>

<P><STRONG><a name="[1d9]"></a>set_time</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ertc.o(i.set_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = set_time &rArr; ERTC_SetTimeValue &rArr; ERTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERTC_WriteBackupRegister
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERTC_SetTimeValue
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAHEXtoBCD
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_RecvRegisterAck
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeSert
</UL>

<P><STRONG><a name="[160]"></a>show_Notcalculated</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, read_nuid.o(i.show_Notcalculated))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = show_Notcalculated &rArr; mq_service_card_send_disp &rArr; mq_service_send_msg &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_card_send_disp
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskDwin
</UL>

<P><STRONG><a name="[1d2]"></a>simulation_Print</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, dwinprotocol.o(i.simulation_Print))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = simulation_Print &rArr; LCD_SendToUart &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendTwoBytes
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendToUart
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendByteToBuf
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwin_FrameHead
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent25
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent16
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent1
</UL>

<P><STRONG><a name="[143]"></a>slotcard_state</STRONG> (Thumb, 314 bytes, Stack size 8 bytes, read_nuid.o(i.slotcard_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = slotcard_state &rArr; Unlock_settlement &rArr; read_card_money &rArr; RC522_ReadCard &rArr; RC522_PcdAuthState &rArr; RC522_PcdComMF522 &rArr; RC522_SetBitMask &rArr; RC522_WriteRawRC &rArr; RC522_ReadWriteByte &rArr; delay_u &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_card_send_disp
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_judge_rete_info
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurMenu
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_card_type
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_card_money
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_read_nuid
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_settlement
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCard
</UL>

<P><STRONG><a name="[145]"></a>start_change_card</STRONG> (Thumb, 892 bytes, Stack size 24 bytes, read_nuid.o(i.start_change_card))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = start_change_card &rArr; startchargUnlock &rArr; read_card_money &rArr; RC522_ReadCard &rArr; RC522_PcdAuthState &rArr; RC522_PcdComMF522 &rArr; RC522_SetBitMask &rArr; RC522_WriteRawRC &rArr; RC522_ReadWriteByte &rArr; delay_u &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_card_send_disp
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ch_ctl_msg
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreRecodeCurNum
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNum32uVariable
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPTransactionrecord
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writer_lock_state
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startchargUnlock
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_CardMCUID
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_lock_state
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_card_type
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_card_money
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_read_nuid
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCard
</UL>

<P><STRONG><a name="[2f2]"></a>startchargUnlock</STRONG> (Thumb, 408 bytes, Stack size 32 bytes, read_nuid.o(i.startchargUnlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = startchargUnlock &rArr; read_card_money &rArr; RC522_ReadCard &rArr; RC522_PcdAuthState &rArr; RC522_PcdComMF522 &rArr; RC522_SetBitMask &rArr; RC522_WriteRawRC &rArr; RC522_ReadWriteByte &rArr; delay_u &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_card_send_disp
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_settlementrecord
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_Transactionrecord
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recordqueryinfo_WR
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_PcdValue
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_ShowCopy
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writer_lock_state
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_card_money
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_change_card
</UL>

<P><STRONG><a name="[149]"></a>stop_change_card</STRONG> (Thumb, 400 bytes, Stack size 24 bytes, read_nuid.o(i.stop_change_card))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = stop_change_card &rArr; read_card_money &rArr; RC522_ReadCard &rArr; RC522_PcdAuthState &rArr; RC522_PcdComMF522 &rArr; RC522_SetBitMask &rArr; RC522_WriteRawRC &rArr; RC522_ReadWriteByte &rArr; delay_u &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_card_send_disp
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ch_ctl_msg
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_settlementrecord
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_PcdValue
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurMenu
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writer_lock_state
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_card_type
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_card_money
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_read_nuid
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCard
</UL>

<P><STRONG><a name="[15f]"></a>time</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, ch_port.o(i.time))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = time
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_cal_day
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskDwin
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_cycle_get_8112
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_from_ctl_msg
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_q_money
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_start_func
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_end_condition
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreHYBill
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendDevStateA
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZF_SendDevState
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timing_charging
</UL>

<P><STRONG><a name="[28d]"></a>uart_recvdispose</STRONG> (Thumb, 246 bytes, Stack size 8 bytes, timer.o(i.uart_recvdispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = uart_recvdispose &rArr; mq_service_dwinrecv_send_disp &rArr; mq_service_send_msg &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_dwinrecv_send_disp
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_4GUart_send_recv
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_485Uart_send_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[2a6]"></a>writer_lock_state</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, read_nuid.o(i.writer_lock_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = writer_lock_state &rArr; RC522_WriteCard &rArr; RC522_PcdAuthState &rArr; RC522_PcdComMF522 &rArr; RC522_SetBitMask &rArr; RC522_WriteRawRC &rArr; RC522_ReadWriteByte &rArr; delay_u &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_WriteCard
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_change_card
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startchargUnlock
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_change_card
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_settlement
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[154]"></a>AppTaskCreate</STRONG> (Thumb, 338 bytes, Stack size 48 bytes, main.o(i.AppTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = AppTaskCreate &rArr; OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[a2]"></a>AppTaskStart</STRONG> (Thumb, 710 bytes, Stack size 8 bytes, main.o(i.AppTaskStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = AppTaskStart &rArr; Init_HLW8112 &rArr; Judge_CheckSum_HLW8112_Calfactor &rArr; Read_HLW8112_RegData &rArr; HLW8112_SPI_ReadReg &rArr; HLW8112_SPI_WriteByte &rArr; delay_u &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ertc
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Int_Init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Int_Init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_Flash_Io_Init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickInit
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatTaskCPUUsageInit
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_Io_Init
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_HLW8112
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Init
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERTC_TimeShow
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_Init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CPU_ClkFreq
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Config
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCreate
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[286]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_at32f4xx.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SetSysClock &rArr; SetSysClockTo144M &rArr; RCC_PLLFrefTableConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo144M
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[287]"></a>SetSysClockTo144M</STRONG> (Thumb, 262 bytes, Stack size 16 bytes, system_at32f4xx.o(i.SetSysClockTo144M))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetSysClockTo144M &rArr; RCC_PLLFrefTableConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_StepModeCmd
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLFrefTableConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[1a7]"></a>ERTC_Bcd2ToByte</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, at32f4xx_ertc.o(i.ERTC_Bcd2ToByte))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERTC_SetTimeValue
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERTC_SetDateValue
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERTC_GetTimeValue
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERTC_GetDateValue
</UL>

<P><STRONG><a name="[1ac]"></a>ERTC_ByteToBcd2</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, at32f4xx_ertc.o(i.ERTC_ByteToBcd2))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERTC_SetTimeValue
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERTC_SetDateValue
</UL>

<P><STRONG><a name="[257]"></a>OS_TickListUpdateDly</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, os_tick.o(i.OS_TickListUpdateDly))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = OS_TickListUpdateDly &rArr; OS_RdyListInsert &rArr; OS_PrioInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsert
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickTask
</UL>

<P><STRONG><a name="[258]"></a>OS_TickListUpdateTimeout</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, os_tick.o(i.OS_TickListUpdateTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = OS_TickListUpdateTimeout &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsert
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListRemove
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickTask
</UL>

<P><STRONG><a name="[259]"></a>OS_TmrLock</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, os_tmr.o(i.OS_TmrLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 156 + Unknown Stack Size
<LI>Call Chain = OS_TmrLock &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrTask
</UL>

<P><STRONG><a name="[25b]"></a>OS_TmrUnlock</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, os_tmr.o(i.OS_TmrUnlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = OS_TmrUnlock &rArr; OSMutexPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrTask
</UL>

<P><STRONG><a name="[17e]"></a>CPU_NameInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, cpu_core.o(i.CPU_NameInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = CPU_NameInit &rArr; CPU_NameClr &rArr; Mem_Clr &rArr; Mem_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_NameClr
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_Init
</UL>

<P><STRONG><a name="[17d]"></a>CPU_TS_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cpu_core.o(i.CPU_TS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = CPU_TS_Init &rArr; CPU_TS_TmrInit &rArr; BSP_CPU_ClkFreq &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrInit
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_Init
</UL>

<P><STRONG><a name="[2f3]"></a>time_cal_day</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ch_port.o(i.time_cal_day))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
</UL>

<P><STRONG><a name="[150]"></a>HLW8112_Dispose</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, chtask.o(i.HLW8112_Dispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = HLW8112_Dispose &rArr; Init_HLW8112 &rArr; Judge_CheckSum_HLW8112_Calfactor &rArr; Read_HLW8112_RegData &rArr; HLW8112_SPI_ReadReg &rArr; HLW8112_SPI_WriteByte &rArr; delay_u &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_HLW8112
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCharge
</UL>

<P><STRONG><a name="[2cf]"></a>ch_from_ctl_msg</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, chtask.o(i.ch_from_ctl_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = ch_from_ctl_msg &rArr; mq_service_ch_send_dip &rArr; mq_service_send_msg &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_ch_send_dip
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_task_tcu_msg_proc
</UL>

<P><STRONG><a name="[2de]"></a>ch_msg_proc</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, chtask.o(i.ch_msg_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = ch_msg_proc &rArr; ch_task_tcu_msg_proc &rArr; ch_from_ctl_msg &rArr; mq_service_ch_send_dip &rArr; mq_service_send_msg &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_task_tcu_msg_proc
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_wait_msg
</UL>

<P><STRONG><a name="[14e]"></a>ch_wait_msg</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, chtask.o(i.ch_wait_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = ch_wait_msg &rArr; ch_msg_proc &rArr; ch_task_tcu_msg_proc &rArr; ch_from_ctl_msg &rArr; mq_service_ch_send_dip &rArr; mq_service_send_msg &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_recv_msg
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_msg_proc
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCharge
</UL>

<P><STRONG><a name="[14d]"></a>io_input_period</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, chtask.o(i.io_input_period))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = io_input_period
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCharge
</UL>

<P><STRONG><a name="[117]"></a>Connect_4G</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, 4gmain.o(i.Connect_4G))
<BR><BR>[Stack]<UL><LI>Max Depth = 284 + Unknown Stack Size
<LI>Call Chain = Connect_4G &rArr; ModuleSIM7600_ConnectServer &rArr; Module_ConnectServer &rArr; UART_4GWrite &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM7600Reset
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM7600CloseNet
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_SIM7600Test
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleSIM7600_ConnectServer
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetSIM7600Status
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetModuleConnectState
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask4GMain
</UL>

<P><STRONG><a name="[ae]"></a>HY_RecvCardStart</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, hyframe.o(i.HY_RecvCardStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HY_RecvCardStart
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hyframe.o(.constdata)
</UL>
<P><STRONG><a name="[aa]"></a>HY_RecvDevFailAck</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hyframe.o(i.HY_RecvDevFailAck))
<BR>[Address Reference Count : 1]<UL><LI> hyframe.o(.constdata)
</UL>
<P><STRONG><a name="[a6]"></a>HY_RecvDevInfoAck</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, hyframe.o(i.HY_RecvDevInfoAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = HY_RecvDevInfoAck &rArr; mq_service_send_to_4gsend &rArr; mq_service_send_msg &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_send_to_4gsend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hyframe.o(.constdata)
</UL>
<P><STRONG><a name="[a9]"></a>HY_RecvDevStopAck</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hyframe.o(i.HY_RecvDevStopAck))
<BR>[Address Reference Count : 1]<UL><LI> hyframe.o(.constdata)
</UL>
<P><STRONG><a name="[a5]"></a>HY_RecvHearAck</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, hyframe.o(i.HY_RecvHearAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 564 + Unknown Stack Size
<LI>Call Chain = HY_RecvHearAck &rArr; HY_SendUpdataAck &rArr; HYFreamSend &rArr; ModuleSIM7600_SendData &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendUpdataAck
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SetSIM7600Mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hyframe.o(.constdata)
</UL>
<P><STRONG><a name="[ac]"></a>HY_RecvQueryBill</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, hyframe.o(i.HY_RecvQueryBill))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = HY_RecvQueryBill &rArr; mq_service_send_to_4gsend &rArr; mq_service_send_msg &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_send_to_4gsend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hyframe.o(.constdata)
</UL>
<P><STRONG><a name="[ad]"></a>HY_RecvQueryRate</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, hyframe.o(i.HY_RecvQueryRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = HY_RecvQueryRate &rArr; mq_service_send_to_4gsend &rArr; mq_service_send_msg &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_send_to_4gsend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hyframe.o(.constdata)
</UL>
<P><STRONG><a name="[ab]"></a>HY_RecvRateSet</STRONG> (Thumb, 416 bytes, Stack size 120 bytes, hyframe.o(i.HY_RecvRateSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = HY_RecvRateSet &rArr; mq_service_send_to_4gsend &rArr; mq_service_send_msg &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_send_to_4gsend
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hyframe.o(.constdata)
</UL>
<P><STRONG><a name="[a8]"></a>HY_RecvRecordAck</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, hyframe.o(i.HY_RecvRecordAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HY_RecvRecordAck &rArr; WriterFmBill &rArr; fal_partition_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriterFmBill
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hyframe.o(.constdata)
</UL>
<P><STRONG><a name="[a7]"></a>HY_RecvRegisterAck</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, hyframe.o(i.HY_RecvRegisterAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HY_RecvRegisterAck &rArr; ReadFmBill &rArr; fal_partition_read &rArr; SPI_FLASH_BufferRead &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFmBill
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCDtoHEX
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SetAppRegisterState
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hyframe.o(.constdata)
</UL>
<P><STRONG><a name="[b0]"></a>HY_RecvReset</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, hyframe.o(i.HY_RecvReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 564 + Unknown Stack Size
<LI>Call Chain = HY_RecvReset &rArr; HY_SendResetAck &rArr; HYFreamSend &rArr; ModuleSIM7600_SendData &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendResetAck
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hyframe.o(.constdata)
</UL>
<P><STRONG><a name="[a3]"></a>HY_RecvStartCharge</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, hyframe.o(i.HY_RecvStartCharge))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = HY_RecvStartCharge &rArr; send_ch_ctl_msg &rArr; mq_service_xxx_send_msg_to_chtask &rArr; mq_service_send_msg &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_send_to_4gsend
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ch_ctl_msg
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SetStartNetState
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hyframe.o(.constdata)
</UL>
<P><STRONG><a name="[a4]"></a>HY_RecvStopCharge</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, hyframe.o(i.HY_RecvStopCharge))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = HY_RecvStopCharge &rArr; send_ch_ctl_msg &rArr; mq_service_xxx_send_msg_to_chtask &rArr; mq_service_send_msg &rArr; OSQPost &rArr; OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_send_to_4gsend
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ch_ctl_msg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hyframe.o(.constdata)
</UL>
<P><STRONG><a name="[af]"></a>HY_RecvUpdata</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, hyframe.o(i.HY_RecvUpdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HY_RecvUpdata &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hyframe.o(.constdata)
</UL>
<P><STRONG><a name="[1]"></a>HY_SendHear</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, hyframe.o(i.HY_SendHear))
<BR><BR>[Stack]<UL><LI>Max Depth = 540 + Unknown Stack Size
<LI>Call Chain = HY_SendHear &rArr; HYFreamSend &rArr; ModuleSIM7600_SendData &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYFreamSend
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetAppRegisterState
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hyframe.o(.data)
</UL>
<P><STRONG><a name="[0]"></a>HY_SendRegister</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, hyframe.o(i.HY_SendRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 540 + Unknown Stack Size
<LI>Call Chain = HY_SendRegister &rArr; HYFreamSend &rArr; ModuleSIM7600_SendData &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String2Hex
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYFreamSend
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetAppRegisterState
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hyframe.o(.data)
</UL>
<P><STRONG><a name="[1d0]"></a>get_crc_Data</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hyframe.o(i.get_crc_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_crc_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYFreamSend
</UL>

<P><STRONG><a name="[1f5]"></a>Module_ConnectServer</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, modulea7680c.o(i.Module_ConnectServer))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + Unknown Stack Size
<LI>Call Chain = Module_ConnectServer &rArr; UART_4GWrite &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_4GWrite
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleSIM7600_ConnectServer
</UL>

<P><STRONG><a name="[b3]"></a>Recv_AT_CGDCONT_Ack</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, modulea7680c.o(i.Recv_AT_CGDCONT_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = Recv_AT_CGDCONT_Ack &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modulea7680c.o(.constdata)
</UL>
<P><STRONG><a name="[b2]"></a>Recv_AT_CIMI_Ack</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, modulea7680c.o(i.Recv_AT_CIMI_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = Recv_AT_CIMI_Ack &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modulea7680c.o(.constdata)
</UL>
<P><STRONG><a name="[b4]"></a>Recv_AT_CIPMODE_Ack</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, modulea7680c.o(i.Recv_AT_CIPMODE_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = Recv_AT_CIPMODE_Ack &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modulea7680c.o(.constdata)
</UL>
<P><STRONG><a name="[b1]"></a>Recv_AT_CSQ_Ack</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, modulea7680c.o(i.Recv_AT_CSQ_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = Recv_AT_CSQ_Ack &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modulea7680c.o(.constdata)
</UL>
<P><STRONG><a name="[b6]"></a>Recv_AT_ConnectServer0Cmd_Ack</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, modulea7680c.o(i.Recv_AT_ConnectServer0Cmd_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = Recv_AT_ConnectServer0Cmd_Ack &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modulea7680c.o(.constdata)
</UL>
<P><STRONG><a name="[b8]"></a>Recv_AT_ConnectServer0_Ack</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, modulea7680c.o(i.Recv_AT_ConnectServer0_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = Recv_AT_ConnectServer0_Ack &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modulea7680c.o(.constdata)
</UL>
<P><STRONG><a name="[b7]"></a>Recv_AT_ConnectServer1Cmd_Ack</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, modulea7680c.o(i.Recv_AT_ConnectServer1Cmd_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = Recv_AT_ConnectServer1Cmd_Ack &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modulea7680c.o(.constdata)
</UL>
<P><STRONG><a name="[b9]"></a>Recv_AT_ConnectServer1_Ack</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, modulea7680c.o(i.Recv_AT_ConnectServer1_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = Recv_AT_ConnectServer1_Ack &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modulea7680c.o(.constdata)
</UL>
<P><STRONG><a name="[ba]"></a>Recv_AT_EnterATCmd_Ack</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, modulea7680c.o(i.Recv_AT_EnterATCmd_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = Recv_AT_EnterATCmd_Ack &rArr; UART_4GWrite &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_4GWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modulea7680c.o(.constdata)
</UL>
<P><STRONG><a name="[b5]"></a>Recv_AT_NETOPEN_Ack</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, modulea7680c.o(i.Recv_AT_NETOPEN_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = Recv_AT_NETOPEN_Ack &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modulea7680c.o(.constdata)
</UL>
<P><STRONG><a name="[bd]"></a>Recv_AT_ReRecv0Cmd_Ack</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, modulea7680c.o(i.Recv_AT_ReRecv0Cmd_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Recv_AT_ReRecv0Cmd_Ack &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RecvDataControl
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modulea7680c.o(.constdata)
</UL>
<P><STRONG><a name="[be]"></a>Recv_AT_ReRecv1Cmd_Ack</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, modulea7680c.o(i.Recv_AT_ReRecv1Cmd_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Recv_AT_ReRecv1Cmd_Ack &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RecvDataControl
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modulea7680c.o(.constdata)
</UL>
<P><STRONG><a name="[bb]"></a>Recv_AT_SendAck0Cmd_Ack</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, modulea7680c.o(i.Recv_AT_SendAck0Cmd_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = Recv_AT_SendAck0Cmd_Ack &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modulea7680c.o(.constdata)
</UL>
<P><STRONG><a name="[bc]"></a>Recv_AT_SendAck1Cmd_Ack</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, modulea7680c.o(i.Recv_AT_SendAck1Cmd_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = Recv_AT_SendAck1Cmd_Ack &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modulea7680c.o(.constdata)
</UL>
<P><STRONG><a name="[bf]"></a>Recv_AT_SetReAct_Ack</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, modulea7680c.o(i.Recv_AT_SetReAct_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = Recv_AT_SetReAct_Ack &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modulea7680c.o(.constdata)
</UL>
<P><STRONG><a name="[c0]"></a>Recv_ActRecv0_Ack</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, modulea7680c.o(i.Recv_ActRecv0_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + Unknown Stack Size
<LI>Call Chain = Recv_ActRecv0_Ack &rArr; Send_AT_CIPRXGET &rArr; UART_4GWrite &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CIPRXGET
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modulea7680c.o(.constdata)
</UL>
<P><STRONG><a name="[c1]"></a>Recv_ActRecv1_Ack</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, modulea7680c.o(i.Recv_ActRecv1_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + Unknown Stack Size
<LI>Call Chain = Recv_ActRecv1_Ack &rArr; Send_AT_CIPRXGET &rArr; UART_4GWrite &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CIPRXGET
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modulea7680c.o(.constdata)
</UL>
<P><STRONG><a name="[c3]"></a>Recv_HttpConect_Ack</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, modulea7680c.o(i.Recv_HttpConect_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = Recv_HttpConect_Ack &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modulea7680c.o(.constdata)
</UL>
<P><STRONG><a name="[c4]"></a>Recv_HttpGet_Ack</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, modulea7680c.o(i.Recv_HttpGet_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = Recv_HttpGet_Ack &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RecvDataControl
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modulea7680c.o(.constdata)
</UL>
<P><STRONG><a name="[c2]"></a>Recv_HttpStart_Ack</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, modulea7680c.o(i.Recv_HttpStart_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = Recv_HttpStart_Ack &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modulea7680c.o(.constdata)
</UL>
<P><STRONG><a name="[c6]"></a>Recv_ReadData_Ack</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, modulea7680c.o(i.Recv_ReadData_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = Recv_ReadData_Ack &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RecvDataControl
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modulea7680c.o(.constdata)
</UL>
<P><STRONG><a name="[c5]"></a>Recv_ReadDone_Ack</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, modulea7680c.o(i.Recv_ReadDone_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = Recv_ReadDone_Ack &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modulea7680c.o(.constdata)
</UL>
<P><STRONG><a name="[203]"></a>Send_AT_CGDCONT</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, modulea7680c.o(i.Send_AT_CGDCONT))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = Send_AT_CGDCONT &rArr; UART_4GWrite &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_4GWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_SIM7600Test
</UL>

<P><STRONG><a name="[202]"></a>Send_AT_CIMI</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, modulea7680c.o(i.Send_AT_CIMI))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = Send_AT_CIMI &rArr; UART_4GWrite &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_4GWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_SIM7600Test
</UL>

<P><STRONG><a name="[27d]"></a>Send_AT_CIPCLOSE</STRONG> (Thumb, 82 bytes, Stack size 80 bytes, modulea7680c.o(i.Send_AT_CIPCLOSE))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = Send_AT_CIPCLOSE &rArr; UART_4GWrite &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_4GWrite
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM7600Reset
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM7600CloseNet
</UL>

<P><STRONG><a name="[1fc]"></a>Send_AT_EnterATCmd</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, modulea7680c.o(i.Send_AT_EnterATCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = Send_AT_EnterATCmd &rArr; UART_4GWrite &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_4GWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_HTTPDownload
</UL>

<P><STRONG><a name="[200]"></a>Send_AT_GET</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, modulea7680c.o(i.Send_AT_GET))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = Send_AT_GET &rArr; UART_4GWrite &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_4GWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_HTTPDownload
</UL>

<P><STRONG><a name="[1fe]"></a>Send_AT_HTTPINIT</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, modulea7680c.o(i.Send_AT_HTTPINIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = Send_AT_HTTPINIT &rArr; UART_4GWrite &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_4GWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_HTTPDownload
</UL>

<P><STRONG><a name="[1ff]"></a>Send_AT_HTTPPAR</STRONG> (Thumb, 74 bytes, Stack size 120 bytes, modulea7680c.o(i.Send_AT_HTTPPAR))
<BR><BR>[Stack]<UL><LI>Max Depth = 284 + Unknown Stack Size
<LI>Call Chain = Send_AT_HTTPPAR &rArr; UART_4GWrite &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_4GWrite
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_HTTPDownload
</UL>

<P><STRONG><a name="[1fd]"></a>Send_AT_HTTPTERM</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, modulea7680c.o(i.Send_AT_HTTPTERM))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = Send_AT_HTTPTERM &rArr; UART_4GWrite &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_4GWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_HTTPDownload
</UL>

<P><STRONG><a name="[27e]"></a>Send_AT_NETCLOSE</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, modulea7680c.o(i.Send_AT_NETCLOSE))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = Send_AT_NETCLOSE &rArr; UART_4GWrite &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_4GWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM7600Reset
</UL>

<P><STRONG><a name="[1f4]"></a>Send_AT_NETOPEN</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, modulea7680c.o(i.Send_AT_NETOPEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = Send_AT_NETOPEN &rArr; UART_4GWrite &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_4GWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleSIM7600_ConnectServer
</UL>

<P><STRONG><a name="[204]"></a>Send_AT_NOTCIPMODE</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, modulea7680c.o(i.Send_AT_NOTCIPMODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = Send_AT_NOTCIPMODE &rArr; UART_4GWrite &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_4GWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_SIM7600Test
</UL>

<P><STRONG><a name="[201]"></a>Send_AT_READ</STRONG> (Thumb, 74 bytes, Stack size 80 bytes, modulea7680c.o(i.Send_AT_READ))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = Send_AT_READ &rArr; UART_4GWrite &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_4GWrite
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_HTTPDownload
</UL>

<P><STRONG><a name="[205]"></a>Send_AT_SetCIPRXGET</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, modulea7680c.o(i.Send_AT_SetCIPRXGET))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = Send_AT_SetCIPRXGET &rArr; UART_4GWrite &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_4GWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_SIM7600Test
</UL>

<P><STRONG><a name="[5]"></a>ZF_SendDevState</STRONG> (Thumb, 490 bytes, Stack size 72 bytes, zfframe.o(i.ZF_SendDevState))
<BR><BR>[Stack]<UL><LI>Max Depth = 276 + Unknown Stack Size
<LI>Call Chain = ZF_SendDevState &rArr; ModuleSIM7600_SendData &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleSIM7600_SendData
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetAppRegisterState
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> zfframe.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>ZF_SendHear</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, zfframe.o(i.ZF_SendHear))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = ZF_SendHear &rArr; ModuleSIM7600_SendData &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleSIM7600_SendData
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetAppRegisterState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> zfframe.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>ZF_SendRegister</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, zfframe.o(i.ZF_SendRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = ZF_SendRegister &rArr; ModuleSIM7600_SendData &rArr; OSMutexPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleSIM7600_SendData
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetAppRegisterState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> zfframe.o(.data)
</UL>
<P><STRONG><a name="[d2]"></a>Amount_charging</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, dwin_com_pro.o(i.Amount_charging))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = Amount_charging &rArr; DisplayCommonMenu &rArr; PrintBackImage &rArr; PraPerprintBackImage &rArr; LCD_SendToUart &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dwin_com_pro.o(.constdata)
</UL>
<P><STRONG><a name="[cf]"></a>Company_code</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dwin_com_pro.o(i.Company_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = Company_code &rArr; Munu13_ShowSysInfo &rArr; Dis_ShowStatus &rArr; PrintStr &rArr; LCD_SendToUart &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_ShowSysInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dwin_com_pro.o(.constdata)
</UL>
<P><STRONG><a name="[104]"></a>DealWithVari</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, dwin_com_pro.o(i.DealWithVari))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DealWithVari
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_DisplayRecvDataAnalyze
</UL>

<P><STRONG><a name="[191]"></a>DispShow_NetState</STRONG> (Thumb, 386 bytes, Stack size 8 bytes, dwin_com_pro.o(i.DispShow_NetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = DispShow_NetState &rArr; PrintIcon &rArr; LCD_SendToUart &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetCSQNum
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetModuleConnectState
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetAppRegisterState
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintIcon
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_show
</UL>

<P><STRONG><a name="[109]"></a>DispShow_Recode</STRONG> (Thumb, 448 bytes, Stack size 16 bytes, dwin_com_pro.o(i.DispShow_Recode))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = DispShow_Recode &rArr; PrintStr &rArr; LCD_SendToUart &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SelectUpNChargeRecode
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SelectNextNChargeRecode
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SelectCurChargeRecode
</UL>

<P><STRONG><a name="[194]"></a>Disp_ShowRTC</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dwin_com_pro.o(i.Disp_ShowRTC))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = Disp_ShowRTC &rArr; Dis_ShowTime &rArr; PrintStr &rArr; LCD_SendToUart &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_ShowTime
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_show
</UL>

<P><STRONG><a name="[d1]"></a>Electric_charing</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, dwin_com_pro.o(i.Electric_charing))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = Electric_charing &rArr; DisplayCommonMenu &rArr; PrintBackImage &rArr; PraPerprintBackImage &rArr; LCD_SendToUart &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dwin_com_pro.o(.constdata)
</UL>
<P><STRONG><a name="[c7]"></a>Munu12_CodeDispose</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, dwin_com_pro.o(i.Munu12_CodeDispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = Munu12_CodeDispose &rArr; Disp_Showsettime &rArr; Dis_SYSShowTime &rArr; PrintStr &rArr; LCD_SendToUart &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_ShowSysInfo
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Showsettime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dwin_com_pro.o(.constdata)
</UL>
<P><STRONG><a name="[c8]"></a>Munu13_DevnumDispose</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, dwin_com_pro.o(i.Munu13_DevnumDispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = Munu13_DevnumDispose &rArr; Munu13_ShowSysInfo &rArr; Dis_ShowStatus &rArr; PrintStr &rArr; LCD_SendToUart &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_ShowSysInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dwin_com_pro.o(.constdata)
</UL>
<P><STRONG><a name="[ca]"></a>Munu13_IP1Sert</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, dwin_com_pro.o(i.Munu13_IP1Sert))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = Munu13_IP1Sert &rArr; Munu13_ShowSysInfo &rArr; Dis_ShowStatus &rArr; PrintStr &rArr; LCD_SendToUart &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_ShowSysInfo
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dwin_com_pro.o(.constdata)
</UL>
<P><STRONG><a name="[cb]"></a>Munu13_IP2Sert</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, dwin_com_pro.o(i.Munu13_IP2Sert))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = Munu13_IP2Sert &rArr; Munu13_ShowSysInfo &rArr; Dis_ShowStatus &rArr; PrintStr &rArr; LCD_SendToUart &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_ShowSysInfo
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dwin_com_pro.o(.constdata)
</UL>
<P><STRONG><a name="[cc]"></a>Munu13_IP3Sert</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, dwin_com_pro.o(i.Munu13_IP3Sert))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = Munu13_IP3Sert &rArr; Munu13_ShowSysInfo &rArr; Dis_ShowStatus &rArr; PrintStr &rArr; LCD_SendToUart &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_ShowSysInfo
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dwin_com_pro.o(.constdata)
</UL>
<P><STRONG><a name="[cd]"></a>Munu13_IP4Sert</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, dwin_com_pro.o(i.Munu13_IP4Sert))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = Munu13_IP4Sert &rArr; Munu13_ShowSysInfo &rArr; Dis_ShowStatus &rArr; PrintStr &rArr; LCD_SendToUart &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_ShowSysInfo
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dwin_com_pro.o(.constdata)
</UL>
<P><STRONG><a name="[c9]"></a>Munu13_PortSert</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, dwin_com_pro.o(i.Munu13_PortSert))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = Munu13_PortSert &rArr; Munu13_ShowSysInfo &rArr; Dis_ShowStatus &rArr; PrintStr &rArr; LCD_SendToUart &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_ShowSysInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dwin_com_pro.o(.constdata)
</UL>
<P><STRONG><a name="[25c]"></a>Period_WriterFmBill</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, dwin_com_pro.o(i.Period_WriterFmBill))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Period_WriterFmBill &rArr; APPTransactionrecord &rArr; Recordqueryinfo_WR &rArr; fal_partition_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriterFmBill
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPTransactionrecord
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dwin_period_entry
</UL>

<P><STRONG><a name="[d3]"></a>Time_charging</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, dwin_com_pro.o(i.Time_charging))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = Time_charging &rArr; DisplayCommonMenu &rArr; PrintBackImage &rArr; PraPerprintBackImage &rArr; LCD_SendToUart &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dwin_com_pro.o(.constdata)
</UL>
<P><STRONG><a name="[d4]"></a>Timing_charging</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, dwin_com_pro.o(i.Timing_charging))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = Timing_charging &rArr; DisplayCommonMenu &rArr; PrintBackImage &rArr; PraPerprintBackImage &rArr; LCD_SendToUart &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dwin_com_pro.o(.constdata)
</UL>
<P><STRONG><a name="[162]"></a>dwin_show</STRONG> (Thumb, 698 bytes, Stack size 48 bytes, dwin_com_pro.o(i.dwin_show))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = dwin_show &rArr; Disp_ShowRTC &rArr; Dis_ShowTime &rArr; PrintStr &rArr; LCD_SendToUart &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNum32uVariable
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurMenu
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_show_record
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_ShowRTC
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispShow_NetState
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskDwin
</UL>

<P><STRONG><a name="[2e5]"></a>dwin_show_record</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, dwin_com_pro.o(i.dwin_show_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = dwin_show_record &rArr; PrintStr &rArr; LCD_SendToUart &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_ShowCopy
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_show
</UL>

<P><STRONG><a name="[163]"></a>dwin_show_state</STRONG> (Thumb, 294 bytes, Stack size 192 bytes, dwin_com_pro.o(i.dwin_show_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = dwin_show_state &rArr; DisplayQRCode &rArr; LCD_SendToUart &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintIcon
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayQRCode
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskDwin
</UL>

<P><STRONG><a name="[157]"></a>flash_para_init</STRONG> (Thumb, 662 bytes, Stack size 16 bytes, dwin_com_pro.o(i.flash_para_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = flash_para_init &rArr; Clear_record &rArr; fal_partition_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_read
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_rete_info
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_record
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskDwin
</UL>

<P><STRONG><a name="[2e7]"></a>judge_rete_info</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, dwin_com_pro.o(i.judge_rete_info))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_para_init
</UL>

<P><STRONG><a name="[d0]"></a>passwordmodify</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, dwin_com_pro.o(i.passwordmodify))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = passwordmodify &rArr; Munu13_ShowSysInfo &rArr; Dis_ShowStatus &rArr; PrintStr &rArr; LCD_SendToUart &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_ShowSysInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dwin_com_pro.o(.constdata)
</UL>
<P><STRONG><a name="[ce]"></a>timeSert</STRONG> (Thumb, 246 bytes, Stack size 40 bytes, dwin_com_pro.o(i.timeSert))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = timeSert &rArr; set_time &rArr; ERTC_SetTimeValue &rArr; ERTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dwin_com_pro.o(.constdata)
</UL>
<P><STRONG><a name="[198]"></a>Dwin_FrameHead</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dwinprotocol.o(i.Dwin_FrameHead))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Dwin_FrameHead &rArr; LCD_SendTwoBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendTwoBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNum32uVariable
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVariColor
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintIcon
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayQRCode
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simulation_Print
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDwinVariable
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNum16uVariable
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PraPerprintBackImage
</UL>

<P><STRONG><a name="[1f1]"></a>LCD_SendBufLenClear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dwinprotocol.o(i.LCD_SendBufLenClear))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendToUart
</UL>

<P><STRONG><a name="[199]"></a>LCD_SendByteToBuf</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, dwinprotocol.o(i.LCD_SendByteToBuf))
<BR><BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNum32uVariable
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendTwoBytes
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVariColor
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintIcon
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayQRCode
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simulation_Print
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDwinVariable
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNum16uVariable
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PraPerprintBackImage
</UL>

<P><STRONG><a name="[1ef]"></a>LCD_SendFourBytes</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dwinprotocol.o(i.LCD_SendFourBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_SendFourBytes &rArr; LCD_SendTwoBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendTwoBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNum32uVariable
</UL>

<P><STRONG><a name="[19b]"></a>LCD_SendToUart</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dwinprotocol.o(i.LCD_SendToUart))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = LCD_SendToUart &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2SENDBUF
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendBufLenClear
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNum32uVariable
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVariColor
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintIcon
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayQRCode
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simulation_Print
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDwinVariable
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNum16uVariable
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PraPerprintBackImage
</UL>

<P><STRONG><a name="[19a]"></a>LCD_SendTwoBytes</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, dwinprotocol.o(i.LCD_SendTwoBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_SendTwoBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendByteToBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNum32uVariable
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendFourBytes
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwin_FrameHead
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVariColor
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintIcon
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayQRCode
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simulation_Print
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDwinVariable
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNum16uVariable
</UL>

<P><STRONG><a name="[2ab]"></a>_printf_core</STRONG> (Thumb, 984 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf$8
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[2ae]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2ad]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[a1]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printf8.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0snprintf$8)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
